<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小柴博客</title>
  
  <subtitle>小柴的成长笔记</subtitle>
  <link href="http://lixutian.github.io/blog/atom.xml" rel="self"/>
  
  <link href="http://lixutian.github.io/blog/"/>
  <updated>2024-12-06T12:22:45.308Z</updated>
  <id>http://lixutian.github.io/blog/</id>
  
  <author>
    <name>浪迹天涯的小柴</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>论文阅读-AppDebloating</title>
    <link href="http://lixutian.github.io/blog/2024/12/06/lun-wen-yue-du-appdebloating/"/>
    <id>http://lixutian.github.io/blog/2024/12/06/lun-wen-yue-du-appdebloating/</id>
    <published>2024-12-05T16:00:00.000Z</published>
    <updated>2024-12-06T12:22:45.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2023-GPT4Graph"><a href="#1-2023-GPT4Graph" class="headerlink" title="1. 2023 GPT4Graph"></a>1. 2023 GPT4Graph</h2><p>论文题目：<a href="https://arxiv.org/abs/2305.15066">GPT4Graph: Can Large Language Models Understand Graph Structured Data? An Empirical Evaluation and Benchmarking</a></p><p>进行实证研究，评估LLM在理解图数据方面的能力</p><ul><li><p>提出一个集成LLM和图结构数据的框架</p><p><img src="/blog/2024/12/06/lun-wen-yue-du-appdebloating/1733452387000.png" alt="1733452387000"></p><ul><li><strong>手工提示 Manual Prompt</strong>：生成图的图描述语言GDL，将用户查询的query与GDL结合起来形成LLM的输入</li><li><strong>自提示 Self Prompt</strong>：LLM推理过程中的中间输出反馈回输入，如图的上下文解释、图格式描述</li></ul></li><li><p>建立评判基准</p><ul><li>结构理解任务<ul><li>Graph Size Detection</li><li>Degree Detection</li><li>Edge Detection</li><li>Attribute Retrieval</li><li>Diameter Computing</li><li>Clustering Coefficient Computing 聚类系数计算</li></ul></li><li>语义理解任务<ul><li>KG QA</li><li>GQL Generation</li><li>Node Classfication</li><li>Graph Classfication</li></ul></li></ul></li><li><p>对各种提示进行实验</p><ul><li><p>结构理解任务-引文网络 obgn-arxiv、Aminer</p><p><img src="/blog/2024/12/06/lun-wen-yue-du-appdebloating/1733450824433.png" alt="结构理解任务实验结果"></p><ul><li>输入设计对结果有重大影响</li><li>角色提示通常可以提高性能</li><li>示例对图理解有影响，样本和零样本在不同小问题上各有优劣</li><li>外部知识放在图输入之前性能更好</li></ul></li><li><p>语义理解任务-知识图谱问答 Wiki、MetaQA</p><ul><li><p>KGQA和GQL生成</p><p><img src="/blog/2024/12/06/lun-wen-yue-du-appdebloating/1733451064493.png" alt="1733451064493"></p><p>SOTA更好，但是LLM也不赖</p><p>KGQA上zero-shot-cot+graph+change-order普遍更好</p><p>GQL生成上one-shot比zero-shot好</p></li><li><p>节点分类任务</p><p><img src="/blog/2024/12/06/lun-wen-yue-du-appdebloating/1733451371183.png" alt="1733451371183"></p><p>2-hop上下文比1-hop更好</p><p>COT对这项任务不那么奏效</p></li><li><p>图分类任务</p><p><img src="/blog/2024/12/06/lun-wen-yue-du-appdebloating/1733451558144.png" alt="1733451558144"></p><p>self-prompt的自格式解释和自总结很有效</p></li></ul></li></ul></li><li><p>相关工作和结论</p><p>理解图的两个路径：与图神经网络GNN、GCN结合，加入注意力机制GAT</p><p>未来可以侧重改进图形结构信息编码</p></li></ul><h2 id="2-2023-ASE-AutoDebloater"><a href="#2-2023-ASE-AutoDebloater" class="headerlink" title="2. 2023 ASE AutoDebloater"></a>2. 2023 ASE AutoDebloater</h2><p>论文题目：<a href="https://ieeexplore.ieee.org/document/10298508">AutoDebloater: Automated Android App Debloating</a></p><p><strong>背景</strong>：Android程序越做越大，对特定用户而言很多功能特征是不需要的，而这些不需要的功能既可能存在安全漏洞，也占用了大量系统资源</p><p><strong>目标</strong>：Remove unnecessary features from Android applications</p><p><strong>方法</strong>：</p><ul><li><p>用StoryDistiller生成App的活动转换图ATG</p><ul><li><p>StoryDistiller输入一个App，输出ATG和每个Activity的截图</p><blockquote><p>An activity is an application component that provides a screen with which users can interact to do something.</p></blockquote></li><li><p>结合静态活动转换和动态活动转换（抓取组件间通信ICC数据）</p></li></ul></li><li><p>识别要删除的活动方法</p><ul><li>识别用户想要删除活动类中的方法</li><li>前向切片识别CG中仅受这些方法影响的其他相关方法</li></ul></li><li><p>采用Soot框架消除待删除方法</p><ul><li>不直接删除函数，而是将函数体清空，返回值设null或0</li><li>保留了各种依赖和调用关系，确保编译通过</li></ul></li></ul><p><strong>验证</strong>：</p><ol><li>user study<ul><li>benchmark：<ul><li>稳定性 stability，不崩溃</li><li>总体满意度 overall satisfaction，Debloating效果</li></ul></li><li>结论：用户满意</li></ul></li><li>性能分析<ul><li>StoryDistiller比较慢，采用缓存方法</li><li>Debloating的时间少于 20 秒</li></ul></li></ol><h2 id="3-2024-ICSE-MiniMon"><a href="#3-2024-ICSE-MiniMon" class="headerlink" title="3. 2024 ICSE MiniMon"></a>3. 2024 ICSE MiniMon</h2><p>论文题目：<a href="https://dl.acm.org/doi/10.1145/3597503.3639113">MiniMon: Minimizing Android Applications with Intelligent Monitoring-Based Debloating</a></p><p>与第2篇工作AutoDebloater是同一个作者，两篇文章针对的问题背景是一致的，但是这篇不再依赖用户自己选择所需功能，而是通过监控用户的使用记录，从而更自动化的挖掘用户意图并Debloate App。同时Debloating的粒度从Activity变成了method</p><p><strong>方法</strong>：</p><p><img src="/blog/2024/12/06/lun-wen-yue-du-appdebloating/1733463210740.png" alt="1733463210740"></p><ol><li><p>静态插桩监视执行情况</p><p>使用Soot的BodyTransformer类对应用程序进行静态插桩，在method的第一个指令前插入 方法签名、时间戳、应用程序名称</p></li><li><p>静态分析获取调用图Call Graph，CG</p><p>使用FlowDroid执行静态分析，生命周期方法和回调作为入口点</p><ul><li>遍历显式方法调用</li><li>检测反射等隐式方法调用，识别所有传播的字符串常量</li><li>使用ICCBot检测组件间通信ICC</li><li>异步任务</li></ul></li><li><p>MethodGeneralizer：给定CG和监控期间记录的methods，使用无监督技术识别所需功能特征的未见method</p><ul><li><p>基于程序分析的技术</p><ul><li>前向切片 Forward Slicing</li><li>反向切片 Backward Slicing</li><li>双向切片 BiDirection</li></ul></li><li><p>基于图聚类的技术</p><ul><li>LCD，Louvain community detection algorithm</li><li>LPA，Label propagation algorithm</li></ul></li><li><p>基于图嵌入的技术</p><ul><li><p>方法1</p><ol><li><p>将图结构转换为序列，DFS生成静态执行路径</p></li><li><p>为每个序列的每种方法生成嵌入</p><ul><li><p>LSTM</p></li><li><p>One-Hot</p></li><li><p>IDF，Inverse Document Frequency 逆文档频率</p><blockquote><p>The intuition is if a method is commonly executed in the<br>static execution paths, then it should have a lower weight in the<br>embedding.</p></blockquote><p><img src="/blog/2024/12/06/lun-wen-yue-du-appdebloating/1733464769531.png" alt="IDF计算公式"></p></li><li><p>IDF-POS，添加位置权重</p></li></ul></li><li><p>跨序列聚合（使用max-pooling）每种方法的嵌入，得到方法的最终嵌入</p></li></ol></li><li><p>方法2：Node2Vec</p><p>得到向量表示后通过余弦相似度识别未见方法</p></li></ul></li></ul></li><li><p>删除无关方法</p><ul><li>同上一篇工作</li><li>在删除的方法函数体中通知该方法已被删除</li></ul></li></ol><p><strong>测试基准</strong>：</p><ul><li>启发式方法：将同一活动中的小部件视为一组相似的用户行为</li><li>使用SARA记录测试用例</li></ul><p><strong>评估指标</strong>：</p><ul><li>召回率 Recall</li><li>Debloating Rate</li><li>加权调和平均值，赋予召回率更大的权重</li></ul><h2 id="4-2023-资源独立工作流可满足性的最小增量模式回溯"><a href="#4-2023-资源独立工作流可满足性的最小增量模式回溯" class="headerlink" title="4. 2023 资源独立工作流可满足性的最小增量模式回溯"></a>4. 2023 资源独立工作流可满足性的最小增量模式回溯</h2><p>论文题目：<a href="https://www.jos.org.cn/jos/article/abstract/6682?st=article_issue">资源独立工作流可满足性的最小增量模式回溯</a></p><p>这篇文章针对高资源配比（资源数n显著大于步骤数k）的工作流可满足性问题（Workflow Satisfiability Problem, WSP)，在资源独立性约束下，改进原有的SOTA方法增量模式回溯法（Incremental Pattern Backtracking, IPB），提出最小增量模式回溯法MIPB，理论上降低了时间复杂度，并进行对比实验检验了算法运行时空性能</p><p>原理：子模式具有唯一增块，增块形成于父子模式的原子性差异，即二者只相差一个增元。论文利用这一最小差异，在计算模式完全指派图时，将增块的候选邻点验证代价降至O(1)，而邻点搜索范围的实际规模可在O(n)量级内极大收缩。据此完全指派图的增量计算时间从O(kn)降至O(n)</p><p><img src="/blog/2024/12/06/lun-wen-yue-du-appdebloating/1733408853315.png" alt="MIPB算法"></p><p>这篇文章全是各种定义和证明，感觉我好像缺少了不止一点前置知识，有种在看天书的感觉，除了整体脉络根本没看懂。。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-2023-GPT4Graph&quot;&gt;&lt;a href=&quot;#1-2023-GPT4Graph&quot; class=&quot;headerlink&quot; title=&quot;1. 2023 GPT4Graph&quot;&gt;&lt;/a&gt;1. 2023 GPT4Graph&lt;/h2&gt;&lt;p&gt;论文题目：&lt;a href</summary>
      
    
    
    
    <category term="学习" scheme="http://lixutian.github.io/blog/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="论文" scheme="http://lixutian.github.io/blog/categories/%E5%AD%A6%E4%B9%A0/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="LLM" scheme="http://lixutian.github.io/blog/tags/LLM/"/>
    
    <category term="Graph" scheme="http://lixutian.github.io/blog/tags/Graph/"/>
    
    <category term="Android" scheme="http://lixutian.github.io/blog/tags/Android/"/>
    
    <category term="Debloating" scheme="http://lixutian.github.io/blog/tags/Debloating/"/>
    
    <category term="静态分析" scheme="http://lixutian.github.io/blog/tags/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/"/>
    
    <category term="程序切片" scheme="http://lixutian.github.io/blog/tags/%E7%A8%8B%E5%BA%8F%E5%88%87%E7%89%87/"/>
    
    <category term="图聚类" scheme="http://lixutian.github.io/blog/tags/%E5%9B%BE%E8%81%9A%E7%B1%BB/"/>
    
    <category term="图嵌入" scheme="http://lixutian.github.io/blog/tags/%E5%9B%BE%E5%B5%8C%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>aurora blog 后端需求-下</title>
    <link href="http://lixutian.github.io/blog/2024/11/30/aurora-blog-hou-duan-xu-qiu-xia/"/>
    <id>http://lixutian.github.io/blog/2024/11/30/aurora-blog-hou-duan-xu-qiu-xia/</id>
    <published>2024-11-29T16:00:00.000Z</published>
    <updated>2024-11-30T18:20:20.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-用户信息模块"><a href="#1-用户信息模块" class="headerlink" title="1. 用户信息模块"></a>1. 用户信息模块</h2><ul><li>Controller: <code>UserInfoController</code></li><li>Service: <ul><li><code>UserInfoService</code> &lt;&#x3D; <code>UserInfoServiceImpl</code></li><li><code>TokenService</code> &lt;&#x3D; <code>TokenServiceImpl</code></li><li><code>RedisService</code> &lt;&#x3D; <code>RedisServiceImpl</code></li><li><code>UserRoleService</code> &lt;&#x3D; <code>UserRoleServiceImpl</code></li></ul></li><li>Mapper:<ul><li><code>UserInfoMapper</code></li><li><code>UserAuthMapper</code></li></ul></li></ul><p>用户信息模块负责管理用户的基本信息、头像、邮箱绑定、订阅状态、角色、禁用状态等功能。管理员可以管理在线用户、修改用户角色及禁用状态，普通用户则可以修改个人信息、头像、邮箱等。使用 MyBatis-Plus 进行数据持久化，使用 Redis 进行缓存管理。</p><h3 id="1-1-更新用户信息"><a href="#1-1-更新用户信息" class="headerlink" title="1.1 更新用户信息"></a>1.1 更新用户信息</h3><ul><li><strong>功能描述</strong>：用户可以更新其个人信息（昵称、个人介绍、网站）</li><li><strong>请求路径</strong>：<code>PUT /users/info</code></li><li><strong>请求参数</strong>：<ul><li><code>UserInfoVO</code>（请求体，昵称、个人介绍、网站）</li></ul></li><li><strong>返回结果</strong>：<code>ResultVO</code></li><li><strong>实现函数</strong>：<ul><li><code>UserInfoController.updateUserInfo</code></li><li><code>UserInfoService.updateUserInfo</code> &lt;&#x3D; <code>UserInfoServiceImpl.updateUserInfo</code></li><li><code>UserInfoMapper.updateById</code></li></ul></li></ul><h3 id="1-2-更新用户头像"><a href="#1-2-更新用户头像" class="headerlink" title="1.2 更新用户头像"></a>1.2 更新用户头像</h3><ul><li><strong>功能描述</strong> : 用户可以上传新的头像</li><li><strong>请求路径</strong> : <code>POST /users/avatar</code></li><li><strong>请求参数</strong> : <ul><li><code>MultipartFile file</code>（上传的头像文件）</li></ul></li><li><strong>返回结果</strong> : <code>ResultVO&lt;String&gt;</code>（上传后的头像路径）</li><li><strong>实现函数</strong>：<ul><li><code>UserInfoController.updateUserAvatar</code></li><li><code>UserInfoService.updateUserAvatar</code>&lt;&#x3D; <code>UserInfoServiceImpl.updateUserAvatar</code></li><li><code>UserInfoMapper.updateById</code></li></ul></li></ul><h3 id="1-3-绑定用户邮箱"><a href="#1-3-绑定用户邮箱" class="headerlink" title="1.3 绑定用户邮箱"></a>1.3 绑定用户邮箱</h3><ul><li><strong>功能描述</strong> : 用户可以绑定或更新其邮箱地址，通过验证码进行验证。</li><li><strong>请求路径</strong> : <code>PUT /users/email</code></li><li><strong>请求参数</strong> : <ul><li><code>EmailVO</code>（请求体，邮箱、验证码）</li></ul></li><li><strong>返回结果</strong> : <code>ResultVO</code></li><li><strong>实现函数</strong>：<ul><li><code>UserInfoController.saveUserEmail</code></li><li><code>UserInfoService.saveUserEmail</code>&lt;&#x3D; <code>UserInfoServiceImpl.saveUserEmail</code></li><li><code>UserInfoMapper.updateById</code></li></ul></li></ul><h3 id="1-4-修改用户的订阅状态"><a href="#1-4-修改用户的订阅状态" class="headerlink" title="1.4 修改用户的订阅状态"></a>1.4 修改用户的订阅状态</h3><ul><li><strong>功能描述</strong> : 用户可以修改其订阅状态。</li><li><strong>请求路径</strong> : <code>PUT /users/subscribe</code></li><li><strong>请求参数</strong> : <ul><li><code>SubscribeVO</code>（请求体，用户ID、订阅状态）</li></ul></li><li><strong>返回结果</strong> : <code>ResultVO</code></li><li><strong>实现函数</strong>：<ul><li><code>UserInfoController.updateUserSubscribe</code></li><li><code>UserInfoService.updateUserSubscribe</code>&lt;&#x3D; <code>UserInfoServiceImpl.updateUserSubscribe</code></li><li><code>UserInfoMapper.updateById</code></li></ul></li></ul><h3 id="1-5-修改用户角色"><a href="#1-5-修改用户角色" class="headerlink" title="1.5 修改用户角色"></a>1.5 修改用户角色</h3><ul><li><strong>功能描述</strong> : 管理员可以修改用户角色。</li><li><strong>请求路径</strong> : <code>PUT /admin/users/role</code></li><li><strong>请求参数</strong> : <ul><li><code>UserRoleVO</code>（请求体，用户ID，昵称，角色ID列表）</li></ul></li><li><strong>返回结果</strong> : <code>ResultVO</code></li><li><strong>实现函数</strong>：<ul><li><code>UserInfoController.updateUserRole</code></li><li><code>UserInfoService.updateUserRole</code>&lt;&#x3D; <code>UserInfoServiceImpl.updateUserRole</code></li><li><code>UserInfoMapper.updateById</code></li><li><code>UserRoleServiceImpl.remove</code></li><li><code>UserRoleServiceImpl.saveBatch</code></li></ul></li></ul><h3 id="1-6-修改用户禁用状态"><a href="#1-6-修改用户禁用状态" class="headerlink" title="1.6 修改用户禁用状态"></a>1.6 修改用户禁用状态</h3><ul><li><strong>功能描述</strong> : 管理员可以禁用或启用用户。</li><li><strong>请求路径</strong> : <code>PUT /admin/users/disable</code></li><li><strong>请求参数</strong> : <ul><li><code>UserDisableVO</code>（请求体，用户ID，禁用状态）</li></ul></li><li><strong>返回结果</strong> : <code>ResultVO</code></li><li><strong>实现函数</strong>：<ul><li><code>UserInfoController.updateUserDisable</code></li><li><code>UserInfoService.updateUserDisable</code>&lt;&#x3D; <code>UserInfoServiceImpl.updateUserDisable</code></li><li><code>UserInfoService.removeOnlineUser</code> &lt;&#x3D; <code>UserInfoServiceImpl.removeOnlineUser</code></li></ul></li></ul><h3 id="1-7-查看在线用户"><a href="#1-7-查看在线用户" class="headerlink" title="1.7 查看在线用户"></a>1.7 查看在线用户</h3><ul><li><strong>功能描述</strong> : 管理员可以查看当前在线用户列表。</li><li><strong>请求路径</strong> : <code>GET /admin/users/online</code></li><li><strong>请求参数</strong> : <ul><li><code>ConditionVO</code>（请求体，一些筛选条件）</li></ul></li><li><strong>返回结果</strong> : <code>ResultVO&lt;PageResultDTO&lt;UserOnlineDTO&gt;&gt;</code>（分页返回在线用户列表）</li><li><strong>实现函数</strong>：<ul><li><code>UserInfoController.listOnlineUsers</code></li><li><code>UserInfoService.listOnlineUsers</code>&lt;&#x3D; <code>UserInfoServiceImpl.listOnlineUsers</code></li><li><code>RedisService.hGetAll</code> &lt;&#x3D; <code>RedisServiceImpl.hGetAll</code></li></ul></li></ul><h3 id="1-8-下线用户"><a href="#1-8-下线用户" class="headerlink" title="1.8 下线用户"></a>1.8 下线用户</h3><ul><li><strong>功能描述</strong> : 管理员可以将指定用户下线。</li><li><strong>请求路径</strong> : <code>DELETE /admin/users/&#123;userInfoId&#125;/online</code></li><li><strong>请求参数</strong> : <ul><li><code>userInfoId</code>（URL路径参数Integer，用户ID）</li></ul></li><li><strong>返回结果</strong> : <code>ResultVO</code></li><li><strong>实现函数</strong>：<ul><li><code>UserInfoController.removeOnlineUser</code></li><li><code>UserInfoService.removeOnlineUser</code>&lt;&#x3D; <code>UserInfoServiceImpl.removeOnlineUser</code></li><li><code>userAuthMapper.selectOne</code></li><li><code>TokenService.delLoginUser</code> &lt;&#x3D; <code>TokenServiceImpl.delLoginUser</code></li></ul></li></ul><h3 id="1-9-根据id获取用户信息"><a href="#1-9-根据id获取用户信息" class="headerlink" title="1.9 根据id获取用户信息"></a>1.9 根据id获取用户信息</h3><ul><li><strong>功能描述</strong> : 获取指定用户的详细信息。</li><li><strong>请求路径</strong> : <code>GET /users/info/&#123;userInfoId&#125;</code></li><li><strong>请求参数</strong> : <ul><li><code>userInfoId</code>（URL路径参数Integer，用户ID）</li></ul></li><li><strong>返回结果</strong> : <code>ResultVO&lt;UserInfoDTO&gt;</code></li><li><strong>实现函数</strong>：<ul><li><code>UserInfoController.getUserInfoById</code></li><li><code>UserInfoService.getUserInfoById</code>&lt;&#x3D; <code>UserInfoServiceImpl.getUserInfoById</code></li><li><code>UserInfoMapper.selectById</code></li></ul></li></ul><hr><p><strong><em><u>以下内容包含AI辅助创作</u>，但已经进行了大量人工检验和修改</em>   : -)</strong></p><h2 id="2-用户账号模块"><a href="#2-用户账号模块" class="headerlink" title="2. 用户账号模块"></a>2. 用户账号模块</h2><ul><li>Controller: <code>UserAuthController</code></li><li>Service: <ul><li><code>UserAuthService</code> &lt;&#x3D; <code>UserAuthServiceImpl</code></li><li><code>RedisService</code> &lt;&#x3D; <code>RedisServiceImpl</code></li><li><code>AuroraInfoService</code> &lt;&#x3D; <code>AuroraInfoServiceImpl</code></li><li><code>TokenService</code> &lt;&#x3D; <code>TokenServiceImpl</code></li><li><code>SocialLoginStrategyContext</code></li></ul></li><li>Mapper: <ul><li><code>UserAuthMapper</code></li><li><code>UserInfoMapper</code></li><li><code>UserRoleMapper</code></li></ul></li></ul><p>用户账号模块负责用户的注册、登录、修改密码、邮箱验证码等功能，并提供管理员功能，包括查询用户信息、修改管理员密码、获取用户区域分布等。使用 MyBatis-Plus 进行数据持久化，使用 Redis 进行缓存管理，RabbitMQ 用于邮件发送。</p><h3 id="2-1-发送邮箱验证码"><a href="#2-1-发送邮箱验证码" class="headerlink" title="2.1 发送邮箱验证码"></a>2.1 发送邮箱验证码</h3><ul><li><strong>功能描述</strong> ：用户可以请求发送邮箱验证码，用于注册、修改密码等操作。</li><li><strong>请求路径</strong> ：<code>GET /users/code</code></li><li><strong>请求参数</strong> ： <ul><li><code>username</code>（参数String）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;?&gt;</code>（操作结果）</li><li><strong>实现函数</strong> ： <ul><li><code>UserAuthController.sendCode</code></li><li><code>UserAuthService.sendCode</code> &lt;&#x3D; <code>UserAuthServiceImpl.sendCode</code></li><li><code>RedisService.set</code> &lt;&#x3D; <code>RedisServiceImpl.set</code></li></ul></li></ul><h3 id="2-2-获取用户区域分布"><a href="#2-2-获取用户区域分布" class="headerlink" title="2.2 获取用户区域分布"></a>2.2 获取用户区域分布</h3><ul><li><strong>功能描述</strong> ：管理员可以查询用户的区域分布。</li><li><strong>请求路径</strong> ：<code>GET /admin/users/area</code></li><li><strong>请求参数</strong> ： <ul><li><code>ConditionVO</code>（请求体，包含查询条件，如区域类型等）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;UserAreaDTO&gt;&gt;</code>（用户区域信息列表）</li><li><strong>实现函数</strong> ： <ul><li><code>UserAuthController.listUserAreas</code></li><li><code>UserAuthService.listUserAreas</code> &lt;&#x3D; <code>UserAuthServiceImpl.listUserAreas</code></li><li><code>RedisService.get</code> &lt;&#x3D; <code>RedisServiceImpl.get</code></li><li><code>RedisService.hGetAll</code> &lt;&#x3D; <code>RedisServiceImpl.hGetAll</code></li></ul></li></ul><h3 id="2-3-查询后台用户列表"><a href="#2-3-查询后台用户列表" class="headerlink" title="2.3 查询后台用户列表"></a>2.3 查询后台用户列表</h3><ul><li><strong>功能描述</strong> ：管理员可以查询后台的用户列表，支持分页和筛选条件。</li><li><strong>请求路径</strong> ：<code>GET /admin/users</code></li><li><strong>请求参数</strong> ： <ul><li><code>ConditionVO</code>（请求体，包含分页信息和筛选条件）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;PageResultDTO&lt;UserAdminDTO&gt;&gt;</code>（用户列表分页数据）</li><li><strong>实现函数</strong> ： <ul><li><code>UserAuthController.listUsers</code></li><li><code>UserAuthService.listUsers</code> &lt;&#x3D; <code>UserAuthServiceImpl.listUsers</code></li><li><code>UserAuthMapper.countUser</code></li><li><code>UserAuthMapper.listUsers</code></li></ul></li></ul><h3 id="2-4-用户注册"><a href="#2-4-用户注册" class="headerlink" title="2.4 用户注册"></a>2.4 用户注册</h3><ul><li><strong>功能描述</strong> ：用户通过邮箱和验证码进行注册。</li><li><strong>请求路径</strong> ：<code>POST /users/register</code></li><li><strong>请求参数</strong> ： <ul><li><code>UserVO</code>（请求体，包含邮箱、密码等信息）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;?&gt;</code>（操作结果）</li><li><strong>实现函数</strong> ： <ul><li><code>UserAuthController.register</code></li><li><code>UserAuthService.register</code> &lt;&#x3D; <code>UserAuthServiceImpl.register</code></li><li><code>AuroraInfoService.getWebsiteConfig().getUserAvatar()</code> &lt;&#x3D; <code>AuroraInfoServiceImpl.getWebsiteConfig()</code></li><li><code>UserInfoMapper.insert</code></li><li><code>UserRoleMapper.insert</code></li><li><code>UserAuthMapper.insert</code></li></ul></li></ul><h3 id="2-5-修改密码"><a href="#2-5-修改密码" class="headerlink" title="2.5 修改密码"></a>2.5 修改密码</h3><ul><li><strong>功能描述</strong> ：用户可以修改自己的密码。</li><li><strong>请求路径</strong> ：<code>PUT /users/password</code></li><li><strong>请求参数</strong> ： <ul><li><code>UserVO</code>（请求体，包含邮箱和新密码）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;?&gt;</code>（操作结果）</li><li><strong>实现函数</strong> ： <ul><li><code>UserAuthController.updatePassword</code></li><li><code>UserAuthService.updatePassword</code> &lt;&#x3D; <code>UserAuthServiceImpl.updatePassword</code></li><li><code>UserAuthMapper.update</code></li></ul></li></ul><h3 id="2-6-修改管理员密码"><a href="#2-6-修改管理员密码" class="headerlink" title="2.6 修改管理员密码"></a>2.6 修改管理员密码</h3><ul><li><strong>功能描述</strong> ：管理员可以修改自己的登录密码。</li><li><strong>请求路径</strong> ：<code>PUT /admin/users/password</code></li><li><strong>请求参数</strong> ： <ul><li><code>PasswordVO</code>（请求体，包含旧密码和新密码）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;?&gt;</code>（操作结果）</li><li><strong>实现函数</strong> ： <ul><li><code>UserAuthController.updateAdminPassword</code></li><li><code>UserAuthService.updateAdminPassword</code> &lt;&#x3D; <code>UserAuthServiceImpl.updateAdminPassword</code></li><li><code>UserAuthMapper.updateById</code></li></ul></li></ul><h3 id="2-7-用户登出"><a href="#2-7-用户登出" class="headerlink" title="2.7 用户登出"></a>2.7 用户登出</h3><ul><li><strong>功能描述</strong> ：用户登出并清除登录状态。</li><li><strong>请求路径</strong> ：<code>POST /users/logout</code></li><li><strong>请求参数</strong> ：无</li><li><strong>返回结果</strong> ：<code>ResultVO&lt;UserLogoutStatusDTO&gt;</code>（登出状态）</li><li><strong>实现函数</strong> ： <ul><li><code>UserAuthController.logout</code></li><li><code>UserAuthService.logout</code> &lt;&#x3D; <code>UserAuthServiceImpl.logout</code></li><li><code>TokenService.delLoginUser</code> &lt;&#x3D; <code>TokenServiceImpl.delLoginUser</code></li></ul></li></ul><h3 id="2-8-QQ-登录"><a href="#2-8-QQ-登录" class="headerlink" title="2.8 QQ 登录"></a>2.8 QQ 登录</h3><ul><li><strong>功能描述</strong> ：用户通过 QQ 账号进行登录。</li><li><strong>请求路径</strong> ：<code>POST /users/oauth/qq</code></li><li><strong>请求参数</strong> ： <ul><li><code>QQLoginVO</code>（请求体，包含 QQ 登录相关信息）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;UserInfoDTO&gt;</code>（用户信息）</li><li><strong>实现函数</strong> ： <ul><li><code>UserAuthController.qqLogin</code></li><li><code>UserAuthService.qqLogin</code> &lt;&#x3D; <code>UserAuthServiceImpl.qqLogin</code></li><li><code>SocialLoginStrategyContext.executeLoginStrategy</code></li></ul></li></ul><h2 id="3-说说模块"><a href="#3-说说模块" class="headerlink" title="3. 说说模块"></a>3. 说说模块</h2><ul><li>Controller: <code>TalkController</code></li><li>Service: <ul><li><code>TalkService</code> &lt;&#x3D; <code>TalkServiceImpl</code></li><li><code>UploadStrategyContext</code></li></ul></li><li>Mapper: <ul><li><code>TalkMapper</code></li><li><code>CommentMapper</code></li></ul></li></ul><p>说说模块用于处理用户发布、查看、修改、删除说说的功能，包括前台的说说列表和后台管理功能。同时支持图片上传，并集成了评论计数功能。</p><h3 id="3-1-查看说说列表"><a href="#3-1-查看说说列表" class="headerlink" title="3.1 查看说说列表"></a>3.1 查看说说列表</h3><ul><li><strong>功能描述</strong> ：获取所有公开的说说列表。</li><li><strong>请求路径</strong> ：<code>GET /talks</code></li><li><strong>请求参数</strong> ：无</li><li><strong>返回结果</strong> ： <code>ResultVO&lt;PageResultDTO&lt;TalkDTO&gt;&gt;</code>（分页返回说说列表，包含说说详细信息）</li><li><strong>实现函数</strong> ： <ul><li><code>TalkController.listTalks</code></li><li><code>TalkService.listTalks</code> &lt;&#x3D; <code>TalkServiceImpl.listTalks</code></li><li><code>TalkMapper.selectCount</code></li><li><code>TalkMapper.listTalks</code></li><li><code>CommentMapper.listCommentCountByTypeAndTopicIds</code></li></ul></li></ul><h3 id="3-2-根据id查看说说"><a href="#3-2-根据id查看说说" class="headerlink" title="3.2 根据id查看说说"></a>3.2 根据id查看说说</h3><ul><li><strong>功能描述</strong> ：根据说说 ID 获取说说详细内容。</li><li><strong>请求路径</strong> ：<code>GET /talks/&#123;talkId&#125;</code></li><li><strong>请求参数</strong> ： <ul><li><code>talkId</code>（URL路径参数Integer，说说 ID）</li></ul></li><li><strong>返回结果</strong> ： <code>ResultVO&lt;TalkDTO&gt;</code>（包含说说的详细信息）</li><li><strong>实现函数</strong> ： <ul><li><code>TalkController.getTalkById</code></li><li><code>TalkService.getTalkById</code> &lt;&#x3D; <code>TalkServiceImpl.getTalkById</code></li><li><code>TalkMapper.getTalkById</code></li><li><code>CommentMapper.listCommentCountByTypeAndTopicId</code></li></ul></li></ul><h3 id="3-3-上传说说图片"><a href="#3-3-上传说说图片" class="headerlink" title="3.3 上传说说图片"></a>3.3 上传说说图片</h3><ul><li><strong>功能描述</strong> ：上传说说的图片。</li><li><strong>请求路径</strong> ：<code>POST /admin/talks/images</code></li><li><strong>请求参数</strong> ： <ul><li><code>MultipartFile file</code>（上传的图片文件）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;String&gt;</code>（图片上传后的文件路径）</li><li><strong>实现函数</strong> ： <ul><li><code>TalkController.saveTalkImages</code></li><li><code>UploadStrategyContext.executeUploadStrategy</code></li></ul></li></ul><h3 id="3-4-保存或修改说说"><a href="#3-4-保存或修改说说" class="headerlink" title="3.4 保存或修改说说"></a>3.4 保存或修改说说</h3><ul><li><strong>功能描述</strong> ：保存或修改说说内容。</li><li><strong>请求路径</strong> ：<code>POST /admin/talks</code></li><li><strong>请求参数</strong> ：<ul><li><code>TalkVO</code> （请求体，包含说说的相关信息）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ：<ul><li><code>TalkController.saveOrUpdateTalk</code></li><li><code>TalkService.saveOrUpdateTalk</code> &lt;&#x3D; <code>TalkServiceImpl.saveOrUpdateTalk</code></li><li><code>TalkService.saveOrUpdate</code></li></ul></li></ul><h3 id="3-5-删除说说"><a href="#3-5-删除说说" class="headerlink" title="3.5 删除说说"></a>3.5 删除说说</h3><ul><li><strong>功能描述</strong> ：删除指定的说说。</li><li><strong>请求路径</strong> ：<code>DELETE /admin/talks</code></li><li><strong>请求参数</strong> ： <ul><li><code>talkIds</code>：要删除的说说 ID 列表，类型为 <code>List&lt;Integer&gt;</code></li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>TalkController.deleteTalks</code></li><li><code>TalkService.deleteTalks</code> &lt;&#x3D; <code>TalkServiceImpl.deleteTalks</code></li><li><code>TalkMapper.deleteBatchIds</code></li></ul></li></ul><h3 id="3-6-查看后台说说"><a href="#3-6-查看后台说说" class="headerlink" title="3.6 查看后台说说"></a>3.6 查看后台说说</h3><ul><li><strong>功能描述</strong> ：后台管理员查看说说列表，支持按条件筛选。</li><li><strong>请求路径</strong> ：<code>GET /admin/talks</code></li><li><strong>请求参数</strong> ： <ul><li><code>ConditionVO</code>（请求体，包含筛选条件）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;PageResultDTO&lt;TalkAdminDTO&gt;&gt;</code>（包含后台说说列表和分页信息）</li><li><strong>实现函数</strong> ： <ul><li><code>TalkController.listBackTalks</code></li><li><code>TalkService.listBackTalks</code> &lt;&#x3D; <code>TalkServiceImpl.listBackTalks</code></li><li><code>TalkMapper.selectCount</code></li><li><code>TalkMapper.listTalksAdmin</code></li></ul></li></ul><h3 id="3-7-根据id查看后台说说"><a href="#3-7-根据id查看后台说说" class="headerlink" title="3.7 根据id查看后台说说"></a>3.7 根据id查看后台说说</h3><ul><li><strong>功能描述</strong> ：后台管理员根据说说 ID 获取说说详细信息。</li><li><strong>请求路径</strong> ：<code>GET /admin/talks/&#123;talkId&#125;</code></li><li><strong>请求参数</strong> ： <ul><li><code>talkId</code>（URL路径参数Integer，说说 ID）</li></ul></li><li><strong>返回结果</strong> ： <code>ResultVO&lt;TalkAdminDTO&gt;</code>（包含后台管理说说的详细信息）</li><li><strong>实现函数</strong> ： <ul><li><code>TalkController.getBackTalkById</code></li><li><code>TalkService.getBackTalkById</code> &lt;&#x3D; <code>TalkServiceImpl.getBackTalkById</code></li><li><code>TalkMapper.getTalkByIdAdmin</code></li></ul></li></ul><h2 id="4-标签模块"><a href="#4-标签模块" class="headerlink" title="4. 标签模块"></a>4. 标签模块</h2><ul><li>Controller: <code>TagController</code></li><li>Service: <ul><li><code>TagService</code> &lt;&#x3D; <code>TagServiceImpl</code></li></ul></li><li>Mapper: <ul><li><code>TagMapper</code></li><li><code>ArticleTagMapper</code></li></ul></li></ul><p>标签模块用于处理标签的增删查改（CRUD）操作，包括前台获取标签列表、后台标签管理和标签的搜索、添加、修改、删除功能。</p><h3 id="4-1-获取所有标签"><a href="#4-1-获取所有标签" class="headerlink" title="4.1 获取所有标签"></a>4.1 获取所有标签</h3><ul><li><strong>功能描述</strong> ：获取所有标签。</li><li><strong>请求路径</strong> ：<code>GET /tags/all</code></li><li><strong>请求参数</strong> ：无</li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;TagDTO&gt;&gt;</code>，包含所有标签的列表。</li><li><strong>实现函数</strong> ： <ul><li><code>TagController.getAllTags</code></li><li><code>TagService.listTags</code> &lt;&#x3D; <code>TagServiceImpl.listTags</code></li><li><code>TagMapper.listTags()</code></li></ul></li></ul><h3 id="4-2-获取前十个标签"><a href="#4-2-获取前十个标签" class="headerlink" title="4.2 获取前十个标签"></a>4.2 获取前十个标签</h3><ul><li><strong>功能描述</strong> ：获取前十个热门标签。</li><li><strong>请求路径</strong> ：<code>GET /tags/topTen</code></li><li><strong>请求参数</strong> ：无</li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;TagDTO&gt;&gt;</code>，包含前十个标签的列表。</li><li><strong>实现函数</strong> ： <ul><li><code>TagController.getTopTenTags</code></li><li><code>TagService.listTopTenTags</code> &lt;&#x3D; <code>TagServiceImpl.listTopTenTags</code></li><li><code>TagMapper.listTopTenTags</code></li></ul></li></ul><h3 id="4-3-查询后台标签列表"><a href="#4-3-查询后台标签列表" class="headerlink" title="4.3 查询后台标签列表"></a>4.3 查询后台标签列表</h3><ul><li><strong>功能描述</strong> ：根据查询条件获取后台标签列表，支持分页。</li><li><strong>请求路径</strong> ：<code>GET /admin/tags</code></li><li><strong>请求参数</strong> ： <ul><li><code>conditionVO</code>：查询条件，类型为 <code>ConditionVO</code>，支持分页和关键词搜索。</li></ul></li><li><strong>返回结果</strong> ： <code>ResultVO&lt;PageResultDTO&lt;TagAdminDTO&gt;&gt;</code>，包含标签列表和分页信息。</li><li><strong>实现函数</strong> ： <ul><li><code>TagController.listTagsAdmin</code></li><li><code>TagService.listTagsAdmin</code> &lt;&#x3D; <code>TagServiceImpl.listTagsAdmin</code></li><li><code>TagMapper.selectCount</code></li><li><code>TagMapper.listTagsAdmin</code></li></ul></li></ul><h3 id="4-4-搜索文章标签"><a href="#4-4-搜索文章标签" class="headerlink" title="4.4 搜索文章标签"></a>4.4 搜索文章标签</h3><ul><li><strong>功能描述</strong> ：根据关键词搜索后台标签。</li><li><strong>请求路径</strong> ：<code>GET /admin/tags/search</code></li><li><strong>请求参数</strong> ： <ul><li><code>conditionVO</code>：查询条件，类型为 <code>ConditionVO</code>，支持关键词搜索。</li></ul></li><li><strong>返回结果</strong> ： <code>ResultVO&lt;List&lt;TagAdminDTO&gt;&gt;</code>，包含符合搜索条件的标签列表。</li><li><strong>实现函数</strong> ： <ul><li><code>TagController.listTagsAdminBySearch</code></li><li><code>TagService.listTagsAdminBySearch</code> &lt;&#x3D; <code>TagServiceImpl.listTagsAdminBySearch</code></li><li><code>TagMapper.selectList</code></li></ul></li></ul><h3 id="4-5-添加或修改标签"><a href="#4-5-添加或修改标签" class="headerlink" title="4.5 添加或修改标签"></a>4.5 添加或修改标签</h3><ul><li><strong>功能描述</strong> ：添加或修改标签信息。</li><li><strong>请求路径</strong> ：<code>POST /admin/tags</code></li><li><strong>请求参数</strong> ： <ul><li><code>tagVO</code>：<code>TagVO</code> 对象，包含标签的相关信息。</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;?&gt;</code> </li><li><strong>实现函数</strong> ： <ul><li><code>TagController.saveOrUpdateTag</code></li><li><code>TagService.saveOrUpdateTag</code> &lt;&#x3D; <code>TagServiceImpl.saveOrUpdateTag</code></li><li><code>TagMapper.selectOne</code></li><li><code>TagService.saveOrUpdate</code></li></ul></li></ul><h3 id="4-6-删除标签"><a href="#4-6-删除标签" class="headerlink" title="4.6 删除标签"></a>4.6 删除标签</h3><ul><li><strong>功能描述</strong> ：删除指定的标签。</li><li><strong>请求路径</strong> ：<code>DELETE /admin/tags</code></li><li><strong>请求参数</strong> ： <ul><li><code>tagIdList</code>：要删除的标签 ID 列表，类型为 <code>List&lt;Integer&gt;</code></li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;?&gt;</code></li><li><strong>实现函数</strong> ： <ul><li><code>TagController.deleteTag</code></li><li><code>TagService.deleteTag</code> &lt;&#x3D; <code>TagServiceImpl.deleteTag</code></li><li><code>ArticleTagMapper.selectCount</code></li><li><code>TagMapper.deleteBatchIds</code></li></ul></li></ul><h2 id="5-角色模块"><a href="#5-角色模块" class="headerlink" title="5. 角色模块"></a>5. 角色模块</h2><ul><li>Controller: <code>RoleController</code></li><li>Service: <ul><li><code>RoleService</code> &lt;&#x3D; <code>RoleServiceImpl</code></li><li><code>RoleResourceService</code> &lt;&#x3D; <code>RoleResourceServiceImpl</code></li><li><code>RoleMenuService</code> &lt;&#x3D; <code>RoleMenuServiceImpl</code></li></ul></li><li>Mapper: <ul><li><code>RoleMapper</code></li><li><code>UserRoleMapper</code></li><li><code>RoleMenuMapper</code></li><li><code>RoleResourceMapper</code></li></ul></li></ul><p>角色模块负责管理系统中的角色信息，包括角色的增删查改（CRUD）操作，角色与用户、菜单、资源的关联管理。管理员可以通过该模块配置和管理用户的角色权限。</p><h3 id="5-1-查询用户角色选项"><a href="#5-1-查询用户角色选项" class="headerlink" title="5.1 查询用户角色选项"></a>5.1 查询用户角色选项</h3><ul><li><strong>功能描述</strong> ：查询系统中所有可分配的角色选项。</li><li><strong>请求路径</strong> ：<code>GET /admin/users/role</code></li><li><strong>请求参数</strong> ：无</li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;UserRoleDTO&gt;&gt;</code>，包含所有角色信息。</li><li><strong>实现函数</strong> ： <ul><li><code>RoleController.listUserRoles</code></li><li><code>RoleService.listUserRoles</code> &lt;&#x3D; <code>RoleServiceImpl.listUserRoles</code></li><li><code>RoleMapper.selectList</code></li></ul></li></ul><h3 id="5-2-查询角色列表"><a href="#5-2-查询角色列表" class="headerlink" title="5.2 查询角色列表"></a>5.2 查询角色列表</h3><ul><li><strong>功能描述</strong> ：根据查询条件获取角色列表，支持分页和关键词搜索。</li><li><strong>请求路径</strong> ：<code>GET /admin/roles</code></li><li><strong>请求参数</strong> ： <ul><li><code>conditionVO</code>：查询条件，类型为 <code>ConditionVO</code>，支持分页和关键词搜索。</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;PageResultDTO&lt;RoleDTO&gt;&gt;</code>，包含角色列表和分页信息。</li><li><strong>实现函数</strong> ： <ul><li><code>RoleController.listRoles</code></li><li><code>RoleService.listRoles</code> &lt;&#x3D; <code>RoleServiceImpl.listRoles</code></li><li><code>RoleMapper.selectCount</code></li><li><code>RoleMapper.listRoles</code></li></ul></li></ul><h3 id="5-3-保存或更新角色"><a href="#5-3-保存或更新角色" class="headerlink" title="5.3 保存或更新角色"></a>5.3 保存或更新角色</h3><ul><li><strong>功能描述</strong> ：添加或更新角色信息。</li><li><strong>请求路径</strong> ：<code>POST /admin/role</code></li><li><strong>请求参数</strong> ： <ul><li><code>roleVO</code>：<code>RoleVO</code> 对象，包含角色的相关信息。</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;?&gt;</code></li><li><strong>实现函数</strong> ： <ul><li><code>RoleController.saveOrUpdateRole</code></li><li><code>RoleService.saveOrUpdateRole</code> &lt;&#x3D; <code>RoleServiceImpl.saveOrUpdateRole</code></li><li><code>RoleMapper.selectOne</code></li><li><code>RoleResourceService.saveOrUpdate</code></li><li><code>RoleResourceService.remove</code></li><li><code>RoleResourceService.saveBatch</code></li><li><code>RoleMenuService.remove</code></li><li><code>RoleMenuService.saveBatch</code></li></ul></li></ul><h3 id="5-4-删除角色"><a href="#5-4-删除角色" class="headerlink" title="5.4 删除角色"></a>5.4 删除角色</h3><ul><li><strong>功能描述</strong> ：删除指定的角色。如果角色下存在用户，则不能删除。</li><li><strong>请求路径</strong> ：<code>DELETE /admin/roles</code></li><li><strong>请求参数</strong> ： <ul><li><code>roleIdList</code>：要删除的角色 ID 列表，类型为 <code>List&lt;Integer&gt;</code>。</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;?&gt;</code></li><li><strong>实现函数</strong> ： <ul><li><code>RoleController.deleteRoles</code></li><li><code>RoleService.deleteRoles</code> &lt;&#x3D; <code>RoleServiceImpl.deleteRoles</code></li><li><code>UserRoleMapper.selectCount</code></li><li><code>RoleMapper.deleteBatchIds</code></li></ul></li></ul><h2 id="6-资源模块"><a href="#6-资源模块" class="headerlink" title="6. 资源模块"></a>6. 资源模块</h2><ul><li>Controller: <code>ResourceController</code></li><li>Service: <ul><li><code>ResourceService</code> &lt;&#x3D; <code>ResourceServiceImpl</code></li></ul></li><li>Mapper: <ul><li><code>ResourceMapper</code></li><li><code>RoleResourceMapper</code></li></ul></li></ul><p>资源模块负责管理系统中的资源，包括查看、新增、修改、删除资源，以及获取角色资源选项等功能。</p><h3 id="6-1-查看资源列表"><a href="#6-1-查看资源列表" class="headerlink" title="6.1 查看资源列表"></a>6.1 查看资源列表</h3><ul><li><strong>功能描述</strong> ：管理员可以查看资源列表，根据条件过滤资源。</li><li><strong>请求路径</strong> ：<code>GET /admin/resources</code></li><li><strong>请求参数</strong> ： <ul><li><code>ConditionVO</code>（请求体，包含筛选条件，如关键词）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;ResourceDTO&gt;&gt;</code>（资源列表）</li><li><strong>实现函数</strong> ： <ul><li><code>ResourceController.listResources</code></li><li><code>ResourceService.listResources</code> &lt;&#x3D; <code>ResourceServiceImpl.listResources</code></li><li><code>ResourceMapper.selectList</code></li><li><code>ResourceServiceImpl.listResourceChildren</code></li></ul></li></ul><h3 id="6-2-删除资源"><a href="#6-2-删除资源" class="headerlink" title="6.2 删除资源"></a>6.2 删除资源</h3><ul><li><strong>功能描述</strong> ：管理员可以删除指定的资源，删除时需确保该资源下没有绑定角色。</li><li><strong>请求路径</strong> ：<code>DELETE /admin/resources/&#123;resourceId&#125;</code></li><li><strong>请求参数</strong> ： <ul><li><code>resourceId</code>（URL路径参数Integer，资源ID）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>ResourceController.deleteResource</code></li><li><code>ResourceService.deleteResource</code> &lt;&#x3D; <code>ResourceServiceImpl.deleteResource</code></li><li><code>RoleResourceMapper.selectCount</code></li><li><code>ResourceMapper.deleteBatchIds</code></li></ul></li></ul><h3 id="6-3-新增或修改资源"><a href="#6-3-新增或修改资源" class="headerlink" title="6.3 新增或修改资源"></a>6.3 新增或修改资源</h3><ul><li><strong>功能描述</strong> ：管理员可以新增或修改资源信息。</li><li><strong>请求路径</strong> ：<code>POST /admin/resources</code></li><li><strong>请求参数</strong> ： <ul><li><code>ResourceVO</code>（请求体，包含资源名称、URL等信息）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>ResourceController.saveOrUpdateResource</code></li><li><code>ResourceService.saveOrUpdateResource</code> &lt;&#x3D; <code>ResourceServiceImpl.saveOrUpdateResource</code></li><li><code>ResourceService.saveOrUpdate</code></li></ul></li></ul><h3 id="6-4-查看角色资源选项"><a href="#6-4-查看角色资源选项" class="headerlink" title="6.4 查看角色资源选项"></a>6.4 查看角色资源选项</h3><ul><li><strong>功能描述</strong> ：管理员可以查看角色资源的选项，用于角色配置资源权限。</li><li><strong>请求路径</strong> ：<code>GET /admin/role/resources</code></li><li><strong>请求参数</strong> ：无</li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;LabelOptionDTO&gt;&gt;</code>（角色资源选项列表）</li><li><strong>实现函数</strong> ： <ul><li><code>ResourceController.listResourceOption</code></li><li><code>ResourceService.listResourceOption</code> &lt;&#x3D; <code>ResourceServiceImpl.listResourceOption</code></li><li><code>ResourceMapper.selectList</code></li><li><code>ResourceServiceImpl.listResourceChildren</code></li></ul></li></ul><h2 id="7-照片模块"><a href="#7-照片模块" class="headerlink" title="7. 照片模块"></a>7. 照片模块</h2><ul><li>Controller: <code>PhotoController</code></li><li>Service: <ul><li><code>PhotoService</code> &lt;&#x3D; <code>PhotoServiceImpl</code></li><li><code>PhotoAlbumService</code> &lt;&#x3D; <code>PhotoAlbumServiceImpl</code></li><li><code>UploadStrategyContext</code></li></ul></li><li>Mapper: <ul><li><code>PhotoMapper</code></li><li><code>PhotoAlbumMapper</code></li></ul></li></ul><p>照片模块负责管理系统中的照片信息，包括上传、查看、删除和更新照片等功能。</p><h3 id="7-1-上传照片"><a href="#7-1-上传照片" class="headerlink" title="7.1 上传照片"></a>7.1 上传照片</h3><ul><li><strong>功能描述</strong> ：管理员可以上传照片，照片将存储在指定路径。</li><li><strong>请求路径</strong> ：<code>POST /admin/photos/upload</code></li><li><strong>请求参数</strong> ： <ul><li><code>file</code>（<code>MultipartFile</code>，照片文件）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;String&gt;</code>（上传后的文件路径）</li><li><strong>实现函数</strong> ： <ul><li><code>PhotoController.savePhotoAlbumCover</code></li><li><code>UploadStrategyContext.executeUploadStrategy</code></li></ul></li></ul><h3 id="7-2-根据相册ID获取照片列表"><a href="#7-2-根据相册ID获取照片列表" class="headerlink" title="7.2 根据相册ID获取照片列表"></a>7.2 根据相册ID获取照片列表</h3><ul><li><strong>功能描述</strong> ：管理员可以根据相册ID获取该相册下的所有照片。</li><li><strong>请求路径</strong> ：<code>GET /admin/photos</code></li><li><strong>请求参数</strong> ： <ul><li><code>ConditionVO</code>（请求体，包含筛选条件）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;PageResultDTO&lt;PhotoAdminDTO&gt;&gt;</code>（分页后的照片列表）</li><li><strong>实现函数</strong> ： <ul><li><code>PhotoController.listPhotos</code></li><li><code>PhotoService.listPhotos</code> &lt;&#x3D; <code>PhotoServiceImpl.listPhotos</code></li><li><code>PhotoMapper.selectPage</code></li></ul></li></ul><h3 id="7-3-更新照片信息"><a href="#7-3-更新照片信息" class="headerlink" title="7.3 更新照片信息"></a>7.3 更新照片信息</h3><ul><li><strong>功能描述</strong> ：管理员可以更新照片的信息（如名称、描述等）。</li><li><strong>请求路径</strong> ：<code>PUT /admin/photos</code></li><li><strong>请求参数</strong> ： <ul><li><code>PhotoInfoVO</code>（请求体，包含照片信息）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>PhotoController.updatePhoto</code></li><li><code>PhotoService.updatePhoto</code> &lt;&#x3D; <code>PhotoServiceImpl.updatePhoto</code></li><li><code>PhotoMapper.updateById</code></li></ul></li></ul><h3 id="7-4-保存照片"><a href="#7-4-保存照片" class="headerlink" title="7.4 保存照片"></a>7.4 保存照片</h3><ul><li><strong>功能描述</strong> ：管理员可以保存新上传的照片。</li><li><strong>请求路径</strong> ：<code>POST /admin/photos</code></li><li><strong>请求参数</strong> ： <ul><li><code>PhotoVO</code>（请求体，包含照片URL、相册ID等信息）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>PhotoController.savePhotos</code></li><li><code>PhotoService.savePhotos</code> &lt;&#x3D; <code>PhotoServiceImpl.savePhotos</code></li><li><code>PhotoService.saveBatch</code></li></ul></li></ul><h3 id="7-5-移动照片相册"><a href="#7-5-移动照片相册" class="headerlink" title="7.5 移动照片相册"></a>7.5 移动照片相册</h3><ul><li><strong>功能描述</strong> ：管理员可以将照片从一个相册移动到另一个相册。</li><li><strong>请求路径</strong> ：<code>PUT /admin/photos/album</code></li><li><strong>请求参数</strong> ： <ul><li><code>PhotoVO</code>（请求体，包含照片ID和目标相册ID）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>PhotoController.updatePhotosAlbum</code></li><li><code>PhotoService.updatePhotosAlbum</code> &lt;&#x3D; <code>PhotoServiceImpl.updatePhotosAlbum</code></li><li><code>PhotoService.updateBatchById</code></li></ul></li></ul><h3 id="7-6-更新照片删除状态"><a href="#7-6-更新照片删除状态" class="headerlink" title="7.6 更新照片删除状态"></a>7.6 更新照片删除状态</h3><ul><li><strong>功能描述</strong> ：管理员可以更改照片的删除状态（标记为已删除或恢复）。</li><li><strong>请求路径</strong> ：<code>PUT /admin/photos/delete</code></li><li><strong>请求参数</strong> ： <ul><li><code>DeleteVO</code>（请求体，包含照片ID和删除状态）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>PhotoController.updatePhotoDelete</code></li><li><code>PhotoService.updatePhotoDelete</code> &lt;&#x3D; <code>PhotoServiceImpl.updatePhotoDelete</code></li><li><code>PhotoService.updateBatchById</code></li><li><code>PhotoMapper.updateBatchById</code></li><li><code>PhotoMapper.selectList</code></li><li><code>PhotoAlbumService.updateBatchById</code></li></ul></li></ul><h3 id="7-7-删除照片"><a href="#7-7-删除照片" class="headerlink" title="7.7 删除照片"></a>7.7 删除照片</h3><ul><li><strong>功能描述</strong> ：管理员可以删除指定的照片。</li><li><strong>请求路径</strong> ：<code>DELETE /admin/photos</code></li><li><strong>请求参数</strong> ： <ul><li><code>List&lt;Integer&gt; photoIds</code>（请求体，包含多个照片ID）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>PhotoController.deletePhotos</code></li><li><code>PhotoService.deletePhotos</code> &lt;&#x3D; <code>PhotoServiceImpl.deletePhotos</code></li><li><code>PhotoMapper.deleteBatchIds</code></li></ul></li></ul><h3 id="7-8-根据相册ID查看照片列表"><a href="#7-8-根据相册ID查看照片列表" class="headerlink" title="7.8 根据相册ID查看照片列表"></a>7.8 根据相册ID查看照片列表</h3><ul><li><strong>功能描述</strong> ：根据相册ID查看相册中的照片列表。</li><li><strong>请求路径</strong> ：<code>GET /albums/&#123;albumId&#125;/photos</code></li><li><strong>请求参数</strong> ： <ul><li><code>albumId</code>（URL路径参数Integer，相册ID）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;PhotoDTO&gt;</code>（照片详情，包含相册封面、名称和照片列表）</li><li><strong>实现函数</strong> ： <ul><li><code>PhotoController.listPhotosByAlbumId</code></li><li><code>PhotoService.listPhotosByAlbumId</code> &lt;&#x3D; <code>PhotoServiceImpl.listPhotosByAlbumId</code></li><li><code>PhotoAlbumService.getOne</code></li><li><code>PhotoMapper.selectPage</code></li></ul></li></ul><h2 id="8-相册模块"><a href="#8-相册模块" class="headerlink" title="8. 相册模块"></a>8. 相册模块</h2><ul><li>Controller: <code>PhotoAlbumController</code></li><li>Service: <ul><li><code>PhotoAlbumService</code> &lt;&#x3D; <code>PhotoAlbumServiceImpl</code></li><li><code>UploadStrategyContext</code></li></ul></li><li>Mapper: <ul><li><code>PhotoAlbumMapper</code></li><li><code>PhotoMapper</code></li></ul></li></ul><p>相册模块负责管理系统中的相册信息，包括创建、删除、查询相册等功能。</p><h3 id="8-1-上传相册封面"><a href="#8-1-上传相册封面" class="headerlink" title="8.1 上传相册封面"></a>8.1 上传相册封面</h3><ul><li><strong>功能描述</strong> ：管理员可以上传相册封面，封面图片将存储在指定路径。</li><li><strong>请求路径</strong> ：<code>POST /admin/photos/albums/upload</code></li><li><strong>请求参数</strong> ： <ul><li><code>file</code>（<code>MultipartFile</code>，上传的相册封面文件）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;String&gt;</code>（上传后的文件路径）</li><li><strong>实现函数</strong> ： <ul><li><code>PhotoAlbumController.savePhotoAlbumCover</code></li><li><code>UploadStrategyContext.executeUploadStrategy</code></li></ul></li></ul><h3 id="8-2-保存或更新相册"><a href="#8-2-保存或更新相册" class="headerlink" title="8.2 保存或更新相册"></a>8.2 保存或更新相册</h3><ul><li><strong>功能描述</strong> ：管理员可以保存或更新相册信息，包括相册名称、封面等。</li><li><strong>请求路径</strong> ：<code>POST /admin/photos/albums</code></li><li><strong>请求参数</strong> ： <ul><li><code>PhotoAlbumVO</code>（请求体，包含相册信息）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>PhotoAlbumController.saveOrUpdatePhotoAlbum</code></li><li><code>PhotoAlbumService.saveOrUpdatePhotoAlbum</code> &lt;&#x3D; <code>PhotoAlbumServiceImpl.saveOrUpdatePhotoAlbum</code></li><li><code>PhotoAlbumMapper.selectOne</code></li><li><code>PhotoAlbumService.saveOrUpdate</code></li></ul></li></ul><h3 id="8-3-查看后台相册列表"><a href="#8-3-查看后台相册列表" class="headerlink" title="8.3 查看后台相册列表"></a>8.3 查看后台相册列表</h3><ul><li><strong>功能描述</strong> ：管理员可以查看相册列表，并支持分页查询。</li><li><strong>请求路径</strong> ：<code>GET /admin/photos/albums</code></li><li><strong>请求参数</strong> ： <ul><li><code>ConditionVO</code>（请求体，包含相册名称、删除状态等筛选条件）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;PageResultDTO&lt;PhotoAlbumAdminDTO&gt;&gt;</code>（分页后的相册列表）</li><li><strong>实现函数</strong> ： <ul><li><code>PhotoAlbumController.listPhotoAlbumBacks</code></li><li><code>PhotoAlbumService.listPhotoAlbumsAdmin</code> &lt;&#x3D; <code>PhotoAlbumServiceImpl.listPhotoAlbumsAdmin</code></li><li><code>PhotoAlbumMapper.selectCount</code></li><li><code>PhotoAlbumMapper.listPhotoAlbumsAdmin</code></li></ul></li></ul><h3 id="8-4-获取后台相册列表信息"><a href="#8-4-获取后台相册列表信息" class="headerlink" title="8.4 获取后台相册列表信息"></a>8.4 获取后台相册列表信息</h3><ul><li><strong>功能描述</strong> ：管理员可以获取所有相册的简要信息。</li><li><strong>请求路径</strong> ：<code>GET /admin/photos/albums/info</code></li><li><strong>请求参数</strong> ：无</li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;PhotoAlbumDTO&gt;&gt;</code>（相册简要信息列表）</li><li><strong>实现函数</strong> ： <ul><li><code>PhotoAlbumController.listPhotoAlbumBackInfos</code></li><li><code>PhotoAlbumService.listPhotoAlbumInfosAdmin</code> &lt;&#x3D; <code>PhotoAlbumServiceImpl.listPhotoAlbumInfosAdmin</code></li><li><code>PhotoAlbumMapper.selectList</code></li></ul></li></ul><h3 id="8-5-根据ID获取后台相册信息"><a href="#8-5-根据ID获取后台相册信息" class="headerlink" title="8.5 根据ID获取后台相册信息"></a>8.5 根据ID获取后台相册信息</h3><ul><li><strong>功能描述</strong> ：管理员可以通过相册ID查看该相册的详细信息，包括相册名称、封面、照片数量等。</li><li><strong>请求路径</strong> ：<code>GET /admin/photos/albums/&#123;albumId&#125;/info</code></li><li><strong>请求参数</strong> ： <ul><li><code>albumId</code>（URL路径参数，相册ID）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;PhotoAlbumAdminDTO&gt;</code>（相册详细信息）</li><li><strong>实现函数</strong> ： <ul><li><code>PhotoAlbumController.getPhotoAlbumBackById</code></li><li><code>PhotoAlbumService.getPhotoAlbumByIdAdmin</code> &lt;&#x3D; <code>PhotoAlbumServiceImpl.getPhotoAlbumByIdAdmin</code></li><li><code>PhotoAlbumMapper.selectById</code></li><li><code>PhotoAlbumMapper.selectCount</code></li></ul></li></ul><h3 id="8-6-根据ID删除相册"><a href="#8-6-根据ID删除相册" class="headerlink" title="8.6 根据ID删除相册"></a>8.6 根据ID删除相册</h3><ul><li><strong>功能描述</strong> ：管理员可以删除指定ID的相册，如果相册下有照片，将会标记为删除状态。</li><li><strong>请求路径</strong> ：<code>DELETE /admin/photos/albums/&#123;albumId&#125;</code></li><li><strong>请求参数</strong> ： <ul><li><code>albumId</code>（URL路径参数，相册ID）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>PhotoAlbumController.deletePhotoAlbumById</code></li><li><code>PhotoAlbumService.deletePhotoAlbumById</code> &lt;&#x3D; <code>PhotoAlbumServiceImpl.deletePhotoAlbumById</code></li><li><code>PhotoMapper.selectCount</code></li><li><code>PhotoAlbumMapper.updateById</code></li><li><code>PhotoMapper.update</code></li><li><code>PhotoAlbumMapper.deleteById</code></li></ul></li></ul><h3 id="8-7-获取相册列表"><a href="#8-7-获取相册列表" class="headerlink" title="8.7 获取相册列表"></a>8.7 获取相册列表</h3><ul><li><strong>功能描述</strong> ：所有用户可以查看公开状态的相册列表。</li><li><strong>请求路径</strong> ：<code>GET /photos/albums</code></li><li><strong>请求参数</strong> ：无</li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;PhotoAlbumDTO&gt;&gt;</code>（公开状态的相册列表）</li><li><strong>实现函数</strong> ： <ul><li><code>PhotoAlbumController.listPhotoAlbums</code></li><li><code>PhotoAlbumService.listPhotoAlbums</code> &lt;&#x3D; <code>PhotoAlbumServiceImpl.listPhotoAlbums</code></li><li><code>PhotoAlbumMapper.selectList</code></li></ul></li></ul><h2 id="9-操作日志模块"><a href="#9-操作日志模块" class="headerlink" title="9. 操作日志模块"></a>9. 操作日志模块</h2><ul><li>Controller: <code>OperationLogController</code></li><li>Service: <ul><li><code>OperationLogService</code> &lt;&#x3D; <code>OperationLogServiceImpl</code></li></ul></li></ul><p>操作日志模块用于记录系统的操作日志，包括操作记录的查看和删除功能。</p><h3 id="9-1-查看操作日志"><a href="#9-1-查看操作日志" class="headerlink" title="9.1 查看操作日志"></a>9.1 查看操作日志</h3><ul><li><strong>功能描述</strong> ：管理员可以查看操作日志，可以根据操作模块或描述进行筛选，并支持分页显示。</li><li><strong>请求路径</strong> ：<code>GET /admin/operation/logs</code></li><li><strong>请求参数</strong> ： <ul><li><code>ConditionVO</code>（请求体，包含操作日志的筛选条件，如操作模块、操作描述、分页信息等）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO&lt;PageResultDTO&lt;OperationLogDTO&gt;&gt;</code>（分页后的操作日志列表）</li><li><strong>实现函数</strong> ： <ul><li><code>OperationLogController.listOperationLogs</code></li><li><code>OperationLogService.listOperationLogs</code> &lt;&#x3D; <code>OperationLogServiceImpl.listOperationLogs</code></li></ul></li></ul><h3 id="9-2-删除操作日志"><a href="#9-2-删除操作日志" class="headerlink" title="9.2 删除操作日志"></a>9.2 删除操作日志</h3><ul><li><strong>功能描述</strong> ：管理员可以删除指定的操作日志，通过日志ID批量删除操作日志。</li><li><strong>请求路径</strong> ：<code>DELETE /admin/operation/logs</code></li><li><strong>请求参数</strong> ： <ul><li><code>operationLogIds</code>（请求体<code>List&lt;Integer&gt;</code>，包含操作日志ID的列表）</li></ul></li><li><strong>返回结果</strong> ：<code>ResultVO</code></li><li><strong>实现函数</strong> ： <ul><li><code>OperationLogController.deleteOperationLogs</code></li><li><code>OperationLogService.removeByIds</code></li></ul></li></ul><h2 id="10-菜单模块"><a href="#10-菜单模块" class="headerlink" title="10. 菜单模块"></a>10. 菜单模块</h2><ul><li>Controller: <code>MenuController</code></li><li>Service: <ul><li><code>MenuService</code> &lt;&#x3D; <code>MenuServiceImpl</code></li></ul></li><li>Mapper: <ul><li><code>MenuMapper</code></li><li><code>RoleMenuMapper</code></li></ul></li></ul><p>菜单模块用于管理系统中的菜单，包括菜单的增、删、改、查功能，以及与角色和用户相关的菜单配置。</p><h3 id="10-1-查看菜单列表"><a href="#10-1-查看菜单列表" class="headerlink" title="10.1 查看菜单列表"></a>10.1 查看菜单列表</h3><ul><li><strong>功能描述</strong> ：管理员可以查看系统菜单列表，可以根据菜单名称进行模糊搜索，返回的菜单列表支持树形结构展示，按照 <code>orderNum</code> 排序。</li><li><strong>请求路径</strong> ：<code>GET /admin/menus</code></li><li><strong>请求参数</strong> ：<code>ConditionVO</code>（包含菜单名称关键词，用于模糊搜索）</li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;MenuDTO&gt;&gt;</code>（菜单列表，按树形结构组织）</li><li><strong>实现函数</strong> ： <ul><li><code>MenuController.listMenus</code></li><li><code>MenuService.listMenus</code> &lt;&#x3D; <code>MenuServiceImpl.listMenus</code></li><li><code>MenuMapper.selectList</code></li><li><code>MenuService.listCatalogs</code></li><li><code>MenuService.getMenuMap</code></li></ul></li></ul><h3 id="10-2-新增或修改菜单"><a href="#10-2-新增或修改菜单" class="headerlink" title="10.2 新增或修改菜单"></a>10.2 新增或修改菜单</h3><ul><li><strong>功能描述</strong> ：管理员可以新增或修改菜单。</li><li><strong>请求路径</strong> ：<code>POST /admin/menus</code></li><li><strong>请求参数</strong> ：<code>MenuVO</code>（菜单信息）</li><li><strong>返回结果</strong> ：<code>ResultVO</code>（操作结果）</li><li><strong>实现函数</strong> ： <ul><li><code>MenuController.saveOrUpdateMenu</code></li><li><code>MenuService.saveOrUpdateMenu</code> &lt;&#x3D; <code>MenuServiceImpl.saveOrUpdateMenu</code></li><li><code>MenuService.saveOrUpdate</code></li></ul></li></ul><h3 id="10-3-修改菜单是否隐藏"><a href="#10-3-修改菜单是否隐藏" class="headerlink" title="10.3 修改菜单是否隐藏"></a>10.3 修改菜单是否隐藏</h3><ul><li><strong>功能描述</strong> ：管理员可以修改菜单的 <code>isHidden</code> 状态，决定菜单是否在前端显示。</li><li><strong>请求路径</strong> ：<code>PUT /admin/menus/isHidden</code></li><li><strong>请求参数</strong> ：<code>IsHiddenVO</code>（菜单ID和隐藏状态）</li><li><strong>返回结果</strong> ：<code>ResultVO</code>（操作结果）</li><li><strong>实现函数</strong> ： <ul><li><code>MenuController.updateMenuIsHidden</code></li><li><code>MenuService.updateMenuIsHidden</code> &lt;&#x3D; <code>MenuServiceImpl.updateMenuIsHidden</code></li><li><code>MenuMapper.updateById</code></li></ul></li></ul><h3 id="10-4-删除菜单"><a href="#10-4-删除菜单" class="headerlink" title="10.4 删除菜单"></a>10.4 删除菜单</h3><ul><li><strong>功能描述</strong> ：管理员可以删除指定的菜单。如果该菜单下存在角色关联或子菜单，删除时需要进行处理。</li><li><strong>请求路径</strong> ：<code>DELETE /admin/menus/&#123;menuId&#125;</code></li><li><strong>请求参数</strong> ：<code>menuId</code>（Integer，菜单ID）</li><li><strong>返回结果</strong> ：<code>ResultVO</code>（操作结果）</li><li><strong>实现函数</strong> ： <ul><li><code>MenuController.deleteMenu</code></li><li><code>MenuService.deleteMenu</code> &lt;&#x3D; <code>MenuServiceImpl.deleteMenu</code></li><li><code>RoleMenuMapper.selectCount</code></li><li><code>MenuMapper.selectList</code></li><li><code>MenuMapper.deleteBatchIds</code></li></ul></li></ul><h3 id="10-5-查看角色菜单选项"><a href="#10-5-查看角色菜单选项" class="headerlink" title="10.5 查看角色菜单选项"></a>10.5 查看角色菜单选项</h3><ul><li><strong>功能描述</strong> ：管理员查看角色对应的菜单选项，通常用于角色权限配置。</li><li><strong>请求路径</strong> ：<code>GET /admin/role/menus</code></li><li><strong>请求参数</strong> ：无</li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;LabelOptionDTO&gt;&gt;</code>（角色菜单选项）</li><li><strong>实现函数</strong> ： <ul><li><code>MenuController.listMenuOptions</code></li><li><code>MenuService.listMenuOptions</code> &lt;&#x3D; <code>MenuServiceImpl.listMenuOptions</code></li><li><code>MenuMapper.selectList</code></li><li><code>MenuService.listCatalogs</code></li><li><code>MenuService.getMenuMap</code></li></ul></li></ul><h3 id="10-6-查看当前用户菜单"><a href="#10-6-查看当前用户菜单" class="headerlink" title="10.6 查看当前用户菜单"></a>10.6 查看当前用户菜单</h3><ul><li><strong>功能描述</strong> ：获取当前登录用户的菜单列表，返回的是用户可以访问的菜单。</li><li><strong>请求路径</strong> ：<code>GET /admin/user/menus</code></li><li><strong>请求参数</strong> ：无</li><li><strong>返回结果</strong> ：<code>ResultVO&lt;List&lt;UserMenuDTO&gt;&gt;</code>（用户菜单列表）</li><li><strong>实现函数</strong> ： <ul><li><code>MenuController.listUserMenus</code></li><li><code>MenuService.listUserMenus</code> &lt;&#x3D; <code>MenuServiceImpl.listUserMenus</code></li><li><code>MenuMapper.listMenusByUserInfoId</code></li><li><code>MenuService.listCatalogs</code></li><li><code>MenuService.getMenuMap</code></li><li><code>MenuService.convertUserMenuList</code></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-用户信息模块&quot;&gt;&lt;a href=&quot;#1-用户信息模块&quot; class=&quot;headerlink&quot; title=&quot;1. 用户信息模块&quot;&gt;&lt;/a&gt;1. 用户信息模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Controller: &lt;code&gt;UserInfoController&lt;/</summary>
      
    
    
    
    <category term="打黑工" scheme="http://lixutian.github.io/blog/categories/%E6%89%93%E9%BB%91%E5%B7%A5/"/>
    
    
    <category term="Aurora Blog" scheme="http://lixutian.github.io/blog/tags/Aurora-Blog/"/>
    
  </entry>
  
  <entry>
    <title>aurora blog 前端前台需求</title>
    <link href="http://lixutian.github.io/blog/2024/11/27/aurora-blog-qian-duan-qian-tai-xu-qiu/"/>
    <id>http://lixutian.github.io/blog/2024/11/27/aurora-blog-qian-duan-qian-tai-xu-qiu/</id>
    <published>2024-11-26T16:00:00.000Z</published>
    <updated>2024-12-02T07:40:55.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端需求"><a href="#前端需求" class="headerlink" title="前端需求"></a>前端需求</h2><h3 id="展示页面"><a href="#展示页面" class="headerlink" title="展示页面"></a>展示页面</h3><h4 id="一、页面形式"><a href="#一、页面形式" class="headerlink" title="一、页面形式"></a>一、页面形式</h4><ol><li>Header导航栏<ul><li>显示LOGO</li><li>有首页、说说、关于、归档、标签、留言、友链、相册等导航按钮，点击后影响页面显示内容</li><li>搜索按钮</li><li>选择语言</li><li>用户头像或登录按钮<ul><li>未登录时显示登录按钮，点击后显示登录弹窗，要求输入账号密码，可选择注册</li><li>注册页面要求提供账号密码、邮箱及其验证码</li><li>登录后显示头像，点击头像时二次选择用户中心或登出选项</li></ul></li><li>色彩主题设置按钮</li></ul></li><li>Footer页脚显示版权信息和备案号</li><li>中间显示内容根据导航栏的选择决定</li><li>除首页外每个页面左上角显示当前路径或标题</li><li>左下角有个小史莱姆说废话</li><li>右下角有一个选项标签，下滑动作时收到右侧，不在顶部时显示页面进度和回到顶部按钮<ul><li>回到顶部，点击后回到顶部</li><li>搜索按钮，点击后弹出**[搜索页面]**对话框</li><li>首页导航按钮，点击后回到首页</li></ul></li><li>用户中心Sider侧边栏<ul><li>头像</li><li>可更改的昵称、网址、描述输入框</li><li>不可更改的邮箱输入框，右面有单独修改按钮<ul><li>点击后弹出邮箱修改弹窗，要求输入邮箱和验证码</li></ul></li><li>订阅开关</li><li>修改按钮</li></ul></li><li>右上角的弹窗提醒</li><li>**[搜索页面]**模态弹窗</li></ol><h4 id="二、首页"><a href="#二、首页" class="headerlink" title="二、首页"></a>二、首页</h4><ol><li>最上面一篇置顶**[文章 格子]**占一排</li><li>接下来两篇推荐**[文章 格子]**放一排</li><li>最后是一个布局<ul><li>左侧是文章列表<ul><li>显示所有标签和全部选项，点击后以此进行筛选</li><li>下面有分页码信息</li><li>一系列**[文章 格子]**<ul><li>标题</li><li>部分内容</li><li>封面图片</li></ul></li></ul></li><li>右侧是一些信息<ul><li><strong>[博客信息介绍 格子]</strong></li><li><strong>[最近评论 格子]</strong></li><li><strong>[标签目录 格子]</strong></li><li><strong>[公告 格子]</strong></li><li><strong>[网站信息 格子]</strong></li></ul></li></ul></li></ol><h4 id="三、说说页面"><a href="#三、说说页面" class="headerlink" title="三、说说页面"></a>三、说说页面</h4><ol><li>左侧是说说列表<ul><li>下面有分页码信息</li><li><strong>[说说 格子]</strong></li></ul></li><li>右侧有一个**[博客信息介绍 格子]**</li></ol><h4 id="四、关于页面"><a href="#四、关于页面" class="headerlink" title="四、关于页面"></a>四、关于页面</h4><p>就是一篇叫做“关于”的文章详情页面，不显示显示上一篇和下一篇而已</p><h4 id="五、归档页面"><a href="#五、归档页面" class="headerlink" title="五、归档页面"></a>五、归档页面</h4><p>显示博客文章的时间轴</p><ul><li>中间一根轴，每个月一个，分页</li><li>其中一侧是日期</li><li>另一侧是不显示封面的**[文章格子]**，点击可查看对应文章</li></ul><h4 id="六、标签页面"><a href="#六、标签页面" class="headerlink" title="六、标签页面"></a>六、标签页面</h4><p>显示所有标签和每个标签下对应的文章数量，点击可跳转</p><h4 id="七、留言页面"><a href="#七、留言页面" class="headerlink" title="七、留言页面"></a>七、留言页面</h4><p>就是一篇叫做“留言”的文章详情页面，不显示显示上一篇和下一篇而已</p><h4 id="八、友链页面"><a href="#八、友链页面" class="headerlink" title="八、友链页面"></a>八、友链页面</h4><p>差不多是一篇叫做“友链”的文章详情页面，不显示显示上一篇和下一篇而已</p><p>额外显示友链信息，每个友链显示头像、名称、介绍，点击可跳转友链链接</p><h4 id="九、相册页面"><a href="#九、相册页面" class="headerlink" title="九、相册页面"></a>九、相册页面</h4><ul><li><p>点中相册导航时显示相册的二级菜单，再次点击跳转</p></li><li><p>显示该相册内的所有照片，点击看大图</p></li></ul><h4 id="十、文章详情页面"><a href="#十、文章详情页面" class="headerlink" title="十、文章详情页面"></a>十、文章详情页面</h4><ul><li>左侧<ul><li>左上角显示 分类、标签、标题</li><li>左上角接下来显示作者头像、昵称、发布时间、字数统计、预计阅读时间</li><li>以MarkDown形式显示博客内容</li><li>下面显示上一篇和下一篇**[文章 格子]**</li><li><strong>[评论区]</strong></li></ul></li><li>右侧<ul><li><strong>[博客信息介绍 格子]</strong></li><li>文章的Md标题目录</li><li>三个按钮，返回上级、返回顶部、发送66</li></ul></li></ul><h4 id="十一、说说详情页面"><a href="#十一、说说详情页面" class="headerlink" title="十一、说说详情页面"></a>十一、说说详情页面</h4><ul><li>左侧<ul><li><strong>[说说格子]</strong></li><li><strong>[评论区]</strong></li></ul></li><li>右侧<ul><li><strong>[博客信息介绍 格子]</strong></li></ul></li></ul><h4 id="十二、搜索页面"><a href="#十二、搜索页面" class="headerlink" title="十二、搜索页面"></a>十二、搜索页面</h4><ul><li>一个输入框，输入内容后右侧有清空按钮</li><li>未输入内容时下面显示最近搜索结果</li><li>输入内容时实时搜索并显示搜索结果</li><li>鼠标点击搜索结果跳转到对应的**[文章详情页面]**</li><li>被选中的搜索结果外侧高亮标识</li><li>Enter跳转到选中结果的**[文章详情页面]**</li><li>上下键移动选中</li><li>Esc或鼠标点击对话框外侧关闭搜索对话框</li><li>下面显示提示信息和使用的搜索引擎</li></ul><h4 id="十三、404页面"><a href="#十三、404页面" class="headerlink" title="十三、404页面"></a>十三、404页面</h4><h3 id="前端组件"><a href="#前端组件" class="headerlink" title="前端组件"></a>前端组件</h3><h4 id="一、文章-格子"><a href="#一、文章-格子" class="headerlink" title="一、文章 格子"></a>一、文章 格子</h4><ul><li>标题</li><li>部分内容</li><li>点击跳转到文章详情</li><li>显示推荐或置顶属性信息</li></ul><h4 id="二、博客信息介绍-格子"><a href="#二、博客信息介绍-格子" class="headerlink" title="二、博客信息介绍 格子"></a>二、博客信息介绍 格子</h4><ul><li>作者头像</li><li>作者昵称</li><li>个人简介</li><li>个人其他网站链接（如GitHub、Gitee）</li><li>博客信息统计（文章、说说、分类、标签的数量）</li></ul><h4 id="三、最近评论-格子"><a href="#三、最近评论-格子" class="headerlink" title="三、最近评论 格子"></a>三、最近评论 格子</h4><p>显示几条最近的评论</p><ul><li>评论人昵称</li><li>评论人头像</li><li>评论时间</li><li>评论内容</li></ul><h4 id="四、标签目录-格子"><a href="#四、标签目录-格子" class="headerlink" title="四、标签目录 格子"></a>四、标签目录 格子</h4><ul><li>显示所有的标签，点击可跳转</li><li>查看更多按钮，跳转到标签页面</li></ul><h4 id="五、公告-格子"><a href="#五、公告-格子" class="headerlink" title="五、公告 格子"></a>五、公告 格子</h4><p>显示公告</p><h4 id="六、网站信息-格子"><a href="#六、网站信息-格子" class="headerlink" title="六、网站信息 格子"></a>六、网站信息 格子</h4><p>显示网站信息</p><ul><li>运行时间</li><li>总访问量</li></ul><h4 id="七、评论区"><a href="#七、评论区" class="headerlink" title="七、评论区"></a>七、评论区</h4><ul><li>输入框</li><li>评论按钮</li><li>显示所有评论，回复的评论向内缩进</li><li>每条评论显示评论人昵称、时间、内容和回复按钮，点击后显示回复框</li><li>评论成功右上角弹窗</li></ul><h4 id="八、说说格子"><a href="#八、说说格子" class="headerlink" title="八、说说格子"></a>八、说说格子</h4><ul><li>左上角显示 说说创建人昵称、时间、评论数</li><li>接下来纯文本形式显示全部文字内容</li><li>显示图片缩略，点击看大图</li></ul><h3 id="管理页面"><a href="#管理页面" class="headerlink" title="管理页面"></a>管理页面</h3><h4 id="一、登录页面"><a href="#一、登录页面" class="headerlink" title="一、登录页面"></a>一、登录页面</h4><p>显示账号密码框，要求登录</p><h4 id="二、页面形式"><a href="#二、页面形式" class="headerlink" title="二、页面形式"></a>二、页面形式</h4><ol><li>左侧一个Sider导航栏，导航栏内容和跳转链接来自后端传入</li><li>上面一个Header<ul><li>左侧固定显示侧边栏收起按钮、可点击的页面路径</li><li>右侧固定显示全屏按钮和个人头像，点击头像时二次选择用户中心或登出选项</li><li>下面是一个打开过的页面标签栏，点击可跳转，有关闭按钮，右侧有全部关闭按钮</li></ul></li><li>根据选择的导航显示页面内容</li></ol><h2 id="后端需求"><a href="#后端需求" class="headerlink" title="后端需求"></a>后端需求</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端需求&quot;&gt;&lt;a href=&quot;#前端需求&quot; class=&quot;headerlink&quot; title=&quot;前端需求&quot;&gt;&lt;/a&gt;前端需求&lt;/h2&gt;&lt;h3 id=&quot;展示页面&quot;&gt;&lt;a href=&quot;#展示页面&quot; class=&quot;headerlink&quot; title=&quot;展示页面&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="打黑工" scheme="http://lixutian.github.io/blog/categories/%E6%89%93%E9%BB%91%E5%B7%A5/"/>
    
    
    <category term="Aurora Blog" scheme="http://lixutian.github.io/blog/tags/Aurora-Blog/"/>
    
  </entry>
  
  <entry>
    <title>蘑菇博客搜索代码模板</title>
    <link href="http://lixutian.github.io/blog/2024/11/20/mo-gu-bo-ke-sou-suo-dai-ma-mo-ban/"/>
    <id>http://lixutian.github.io/blog/2024/11/20/mo-gu-bo-ke-sou-suo-dai-ma-mo-ban/</id>
    <published>2024-11-19T16:00:00.000Z</published>
    <updated>2024-11-30T18:20:07.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搜索框与搜索结果的代码模板：以蘑菇博客为例"><a href="#搜索框与搜索结果的代码模板：以蘑菇博客为例" class="headerlink" title="搜索框与搜索结果的代码模板：以蘑菇博客为例"></a>搜索框与搜索结果的代码模板：以蘑菇博客为例</h1><h2 id="搜索框-前端"><a href="#搜索框-前端" class="headerlink" title="搜索框-前端"></a>搜索框-前端</h2><p>我从原来的代码文件里将相关代码复制粘贴到新文件<a href="../mogu_blog_v2/vue_mogu_web/src/views/test1.vue">test1.vue</a>中，并将路径添加到全局路由，<strong>可用</strong></p><h3 id="显示代码"><a href="#显示代码" class="headerlink" title="显示代码"></a>显示代码</h3><p><a href="../mogu_blog_v2/vue_mogu_web/src/views/home.vue">.&#x2F;mogu_blog_v2&#x2F;vue_mogu_web&#x2F;src&#x2F;views&#x2F;home.vue</a> line 106-121</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div class&#x3D;&quot;searchbox&quot;&gt;    &lt;div id&#x3D;&quot;search_bar&quot; :class&#x3D;&quot;(showSearch || keyword.length &gt; 0)?&#39;search_bar search_open&#39;:&#39;search_bar&#39;&quot;&gt;    &lt;input        ref&#x3D;&quot;searchInput&quot;        class&#x3D;&quot;input&quot;        placeholder&#x3D;&quot;想搜点什么呢..&quot;        type&#x3D;&quot;text&quot;        name&#x3D;&quot;keyboard&quot;        v-model&#x3D;&quot;keyword&quot;        v-on:keyup.enter&#x3D;&quot;search&quot;    &gt;    &lt;p class&#x3D;&quot;search_ico&quot; @click&#x3D;&quot;clickSearchIco&quot; :style&#x3D;&quot;(browserFlag &#x3D;&#x3D; 1)?&#39;&#39;:&#39;top:17px&#39;&quot;&gt;        &lt;span&gt;&lt;&#x2F;span&gt;    &lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示效果：<img src="/blog/2024/11/20/mo-gu-bo-ke-sou-suo-dai-ma-mo-ban/image.png" alt="alt text"></p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>按下搜索图标时：<br><a href="../mogu_blog_v2/vue_mogu_web/src/views/home.vue">.&#x2F;mogu_blog_v2&#x2F;vue_mogu_web&#x2F;src&#x2F;views&#x2F;home.vue</a> line 1205-1212</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">clickSearchIco</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>showSearch <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>showSearch<span class="token punctuation">;</span>    <span class="token comment">//获取焦点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>searchInput<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>键盘按下Enter时及按下搜索时调用：<br><a href="../mogu_blog_v2/vue_mogu_web/src/views/home.vue">.&#x2F;mogu_blog_v2&#x2F;vue_mogu_web&#x2F;src&#x2F;views&#x2F;home.vue</a> line 728-739</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">search</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$notify<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'错误'</span><span class="token punctuation">,</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"关键字不能为空"</span><span class="token punctuation">,</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>            <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token number">100</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/list"</span><span class="token punctuation">,</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">keyword</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">,</span> <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>searchModel<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一些无关紧要的逻辑"><a href="#一些无关紧要的逻辑" class="headerlink" title="一些无关紧要的逻辑"></a>一些无关紧要的逻辑</h3><p>browserFlag, getBrowser, setSize(), mounted()等及其依赖的后端请求API<br>用于根据浏览器状态决定搜索框是否展开，与基本功能关系不太</p><h2 id="挖掘方法"><a href="#挖掘方法" class="headerlink" title="挖掘方法"></a>挖掘方法</h2><h3 id="手工挖掘流程"><a href="#手工挖掘流程" class="headerlink" title="手工挖掘流程"></a>手工挖掘流程</h3><ol><li>阅读home.vue文件中的代码</li><li>找到搜索框对应的<code>&lt;template&gt;</code>代码，加入test1.vue文件</li><li>找出<code>&lt;template&gt;</code>代码中涉及到的js变量，如showSearch、keyword</li><li>到<code>&lt;script&gt;</code>部分寻找这些变量的定义和为这些变量赋值的方法，加入test1.vue文件</li><li>递归寻找新增的方法中涉及到的新变量，回到4</li></ol><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><ol><li>能跑</li><li>有冗余 -&gt; 是否继续递归下去需要考虑</li><li>仅考虑template(html)和js，未考虑css的问题</li></ol><h2 id="搜索结果"><a href="#搜索结果" class="headerlink" title="搜索结果"></a>搜索结果</h2><p>点击搜索后，重定向到新页面路径<br><code>this.$router.push(&#123;path: &quot;/list&quot;, query: &#123;keyword: this.keyword, model: this.searchModel&#125;&#125;);</code></p><ul><li>原url：<code>$&#123;baseurl&#125;/#/test1</code>等有搜索框的等可以</li><li>新url：<code>$&#123;baseurl&#125;/#/list?keyword=2&amp;model=0</code><br><img src="/blog/2024/11/20/mo-gu-bo-ke-sou-suo-dai-ma-mo-ban/image-1.png" alt="alt text"></li></ul><h3 id="显示代码-1"><a href="#显示代码-1" class="headerlink" title="显示代码"></a>显示代码</h3><p><a href="../mogu_blog_v2/vue_mogu_web/src/views/list.vue">.&#x2F;mogu_blog_v2&#x2F;vue_mogu_web&#x2F;src&#x2F;views&#x2F;list.vue</a> line 11-68</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--blogsbox begin--&gt;&lt;div class&#x3D;&quot;blogsbox&quot;&gt;&lt;div    v-for&#x3D;&quot;item in blogData&quot;    :key&#x3D;&quot;item.uid&quot;    class&#x3D;&quot;blogs&quot;    data-scroll-reveal&#x3D;&quot;enter bottom over 1s&quot;&gt;    &lt;h3 class&#x3D;&quot;blogtitle&quot;&gt;    &lt;a        href&#x3D;&quot;javascript:void(0);&quot;        @click&#x3D;&quot;goToInfo(item)&quot;        v-html&#x3D;&quot;item.title&quot;    &gt;&#123;&#123; item.title &#125;&#125;&lt;&#x2F;a&gt;    &lt;&#x2F;h3&gt;    &lt;span class&#x3D;&quot;blogpic&quot;&gt;    &lt;a href&#x3D;&quot;javascript:void(0);&quot; @click&#x3D;&quot;goToInfo(item)&quot; title&gt;        &lt;img v-if&#x3D;&quot;item.photoUrl&quot; :src&#x3D;&quot;item.photoUrl&quot; alt&#x3D;&quot;&quot;&gt;    &lt;&#x2F;a&gt;    &lt;&#x2F;span&gt;    &lt;p class&#x3D;&quot;blogtext&quot; v-html&#x3D;&quot;item.summary&quot;&gt;&#123;&#123; item.summary &#125;&#125;&lt;&#x2F;p&gt;    &lt;div class&#x3D;&quot;bloginfo&quot;&gt;    &lt;ul&gt;        &lt;li class&#x3D;&quot;author&quot;&gt;        &lt;span class&#x3D;&quot;iconfont&quot;&gt;&#xe60f;&lt;&#x2F;span&gt;        &lt;a href&#x3D;&quot;javascript:void(0);&quot; @click&#x3D;&quot;goToAuthor(item.author)&quot;&gt;&#123;&#123; item.author &#125;&#125;&lt;&#x2F;a&gt;        &lt;&#x2F;li&gt;        &lt;li class&#x3D;&quot;lmname&quot; v-if&#x3D;&quot;item.blogSortName&quot;&gt;        &lt;span class&#x3D;&quot;iconfont&quot;&gt;&#xe603;&lt;&#x2F;span&gt;        &lt;a href&#x3D;&quot;javascript:void(0);&quot; @click&#x3D;&quot;goToList(item.blogSortUid)&quot;&gt;&#123;&#123; item.blogSortName &#125;&#125;&lt;&#x2F;a&gt;        &lt;&#x2F;li&gt;        &lt;li class&#x3D;&quot;createTime&quot;&gt;&lt;span class&#x3D;&quot;iconfont&quot;&gt;&#xe606;&lt;&#x2F;span&gt;&#123;&#123; item.createTime &#125;&#125;&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;isEnd&quot;&gt;    &lt;div    class&#x3D;&quot;loadContent&quot;    @click&#x3D;&quot;loadContent&quot;    v-if&#x3D;&quot;!isEnd &amp;&amp; !loading &amp;&amp; totalPages&gt;0&quot;    &gt;点击加载更多    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;lds-css ng-scope&quot; v-if&#x3D;&quot;!isEnd &amp;&amp; loading&quot;&gt;    &lt;div style&#x3D;&quot;width:100%;height:100%&quot; class&#x3D;&quot;lds-facebook&quot;&gt;        &lt;div&gt;&lt;&#x2F;div&gt;        &lt;div&gt;&lt;&#x2F;div&gt;        &lt;div&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;span v-if&#x3D;&quot;blogData.length &gt;&#x3D; 0 &amp;&amp; isEnd &amp;&amp;!loading &amp;&amp; totalPages&gt;0&quot;&gt;我也是有底线的~&lt;&#x2F;span&gt;    &lt;span v-if&#x3D;&quot;totalPages &#x3D;&#x3D; 0 &amp;&amp; !loading&quot;&gt;空空如也~&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;!--blogsbox end--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事件处理-1"><a href="#事件处理-1" class="headerlink" title="事件处理"></a>事件处理</h3><ul><li>进入页面时即根据参数进行查询，入口在created()中</li><li>created()调用search()</li><li>search()调用convertSearchData()及一系列依赖的后端请求API</li><li>…</li></ul><p>经过注释检查，整个<a href="../mogu_blog_v2/vue_mogu_web/src/views/list.vue">list.vue</a>文件里面的js代码全都会被调用到</p><h3 id="API调用"><a href="#API调用" class="headerlink" title="API调用"></a>API调用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>getBlogByUid<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../api/blogContent"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>searchBlog<span class="token punctuation">,</span> searchBlogByAuthor<span class="token punctuation">,</span> searchBlogByES<span class="token punctuation">,</span> searchBlogBySort<span class="token punctuation">,</span> searchBlogByTag<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../api/search"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>API定义示例，后面的后端请求也以此为例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 通过SQL搜索博客 * @param params */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">searchBlog</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">WEB_API</span> <span class="token operator">+</span> <span class="token string">'/search/sqlSearchBlog'</span><span class="token punctuation">,</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    params  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后端请求的处理"><a href="#后端请求的处理" class="headerlink" title="后端请求的处理"></a>后端请求的处理</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>通过VSCode全局搜索<code>/search/sqlSearchBlog</code>找到对应的Controller在<a href="../mogu_blog_v2/mogu_web/src/main/java/com/moxi/mogublog/web/restapi/SearchRestApi.java">mogu_web模块的com.moxi.mogublog.web.restapi.SearchRestApi</a>下 line 33-52</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/search"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"SQL搜索相关接口"</span><span class="token punctuation">,</span> tags <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"SQL搜索相关接口"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SearchRestApi</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">BlogService</span> blogService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SystemConfigService</span> systemConfigService<span class="token punctuation">;</span>    <span class="token comment">/**     * 使用SQL语句搜索博客，如需使用Solr或者ElasticSearch 需要启动 mogu-search     *     * @param keywords     * @param currentPage     * @param pageSize     * @return     */</span>    <span class="token annotation punctuation">@BussinessLog</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"搜索Blog"</span><span class="token punctuation">,</span> behavior <span class="token operator">=</span> <span class="token class-name">EBehavior</span><span class="token punctuation">.</span><span class="token constant">BLOG_SEARCH</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"搜索Blog"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"搜索Blog"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sqlSearchBlog"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sqlSearchBlog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"keywords"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"关键字"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">String</span> keywords<span class="token punctuation">,</span>                                <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"currentPage"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"当前页数"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"currentPage"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> currentPage<span class="token punctuation">,</span>                                <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"pageSize"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"每页显示数目"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"pageSize"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"10"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>keywords<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">ResultUtil</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token class-name">SysConf</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span> <span class="token class-name">MessageConf</span><span class="token punctuation">.</span><span class="token constant">KEYWORD_IS_NOT_EMPTY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">ResultUtil</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token class-name">SysConf</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">,</span> blogService<span class="token punctuation">.</span><span class="token function">getBlogByKeyword</span><span class="token punctuation">(</span>keywords<span class="token punctuation">,</span> currentPage<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>阅读Controller的代码，发现调用<code>blogService.getBlogByKeyword</code>方法</p><p>Service类存放在另一个包下，<code>import com.moxi.mogublog.xo.service.BlogService;</code></p><p>且<a href="../mogu_blog_v2/mogu_xo/src/main/java/com/moxi/mogublog/xo/service/BlogService.java">BlogService</a>是一个接口类 line 272-280</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogService</span> <span class="token keyword">extends</span> <span class="token class-name">SuperService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token comment">/**     * 通过关键字搜索博客列表     *     * @param keywords     * @param currentPage     * @param pageSize     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getBlogByKeyword</span><span class="token punctuation">(</span><span class="token class-name">String</span> keywords<span class="token punctuation">,</span> <span class="token class-name">Long</span> currentPage<span class="token punctuation">,</span> <span class="token class-name">Long</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在一个父类(接口)<a href="../mogu_blog_v2/mogu_base/src/main/java/com/moxi/mougblog/base/service/SuperService.java">SuperService</a></p><p>点击IDEA的智能跳转，找到该接口的实现<a href="../mogu_blog_v2/mogu_xo/src/main/java/com/moxi/mogublog/xo/service/impl/BlogServiceImpl.java">BlogServiceImpl</a> line 1437-1523</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getBlogByKeyword</span><span class="token punctuation">(</span><span class="token class-name">String</span> keywords<span class="token punctuation">,</span> <span class="token class-name">Long</span> currentPage<span class="token punctuation">,</span> <span class="token class-name">Long</span> pageSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> keyword <span class="token operator">=</span> keywords<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>wrapper <span class="token operator">-></span> wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">SQLConf</span><span class="token punctuation">.</span><span class="token constant">TITLE</span><span class="token punctuation">,</span> keyword<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">SQLConf</span><span class="token punctuation">.</span><span class="token constant">SUMMARY</span><span class="token punctuation">,</span> keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">SQLConf</span><span class="token punctuation">.</span><span class="token constant">STATUS</span><span class="token punctuation">,</span> <span class="token class-name">EStatus</span><span class="token punctuation">.</span><span class="token constant">ENABLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">SQLConf</span><span class="token punctuation">.</span><span class="token constant">IS_PUBLISH</span><span class="token punctuation">,</span> <span class="token class-name">EPublish</span><span class="token punctuation">.</span><span class="token constant">PUBLISH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Blog</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> i <span class="token operator">-></span> <span class="token operator">!</span>i<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">SQLConf</span><span class="token punctuation">.</span><span class="token constant">CONTENT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">SQLConf</span><span class="token punctuation">.</span><span class="token constant">CLICK_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    page<span class="token punctuation">.</span><span class="token function">setCurrent</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span>    page<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> iPage <span class="token operator">=</span> blogService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Blog</span><span class="token punctuation">></span></span> blogList <span class="token operator">=</span> iPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> blogSortUidList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> pictureMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">StringBuffer</span> fileUids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blogList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取图片uid</span>        blogSortUidList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getBlogSortUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getFileUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fileUids<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getFileUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">SysConf</span><span class="token punctuation">.</span><span class="token constant">FILE_SEGMENTATION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给标题和简介设置高亮</span>        item<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token function">getHitCode</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token punctuation">.</span><span class="token function">setSummary</span><span class="token punctuation">(</span><span class="token function">getHitCode</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keyword<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用图片接口，获取图片</span>    <span class="token class-name">String</span> pictureList <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileUids <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pictureList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pictureFeignClient<span class="token punctuation">.</span><span class="token function">getPicture</span><span class="token punctuation">(</span>fileUids<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SysConf</span><span class="token punctuation">.</span><span class="token constant">FILE_SEGMENTATION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> picList <span class="token operator">=</span> webUtil<span class="token punctuation">.</span><span class="token function">getPictureMap</span><span class="token punctuation">(</span>pictureList<span class="token punctuation">)</span><span class="token punctuation">;</span>    picList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        pictureMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">SQLConf</span><span class="token punctuation">.</span><span class="token constant">UID</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">SQLConf</span><span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BlogSort</span><span class="token punctuation">></span></span> blogSortList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>blogSortUidList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        blogSortList <span class="token operator">=</span> blogSortService<span class="token punctuation">.</span><span class="token function">listByIds</span><span class="token punctuation">(</span>blogSortUidList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> blogSortMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blogSortList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        blogSortMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getSortName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置分类名 和 图片</span>    blogList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>blogSortMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getBlogSortUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            item<span class="token punctuation">.</span><span class="token function">setBlogSortName</span><span class="token punctuation">(</span>blogSortMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getBlogSortUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//获取图片</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getFileUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pictureUidsTemp <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">changeStringToString</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getFileUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SysConf</span><span class="token punctuation">.</span><span class="token constant">FILE_SEGMENTATION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pictureListTemp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pictureUidsTemp<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>picture <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                pictureListTemp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pictureMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>picture<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 只设置一张标题图</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pictureListTemp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">setPhotoUrl</span><span class="token punctuation">(</span>pictureListTemp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                item<span class="token punctuation">.</span><span class="token function">setPhotoUrl</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回总记录数</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">SysConf</span><span class="token punctuation">.</span><span class="token constant">TOTAL</span><span class="token punctuation">,</span> iPage<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回总页数</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">SysConf</span><span class="token punctuation">.</span><span class="token constant">TOTAL_PAGE</span><span class="token punctuation">,</span> iPage<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回当前页大小</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">SysConf</span><span class="token punctuation">.</span><span class="token constant">PAGE_SIZE</span><span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回当前页</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">SysConf</span><span class="token punctuation">.</span><span class="token constant">CURRENT_PAGE</span><span class="token punctuation">,</span> iPage<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回数据</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">SysConf</span><span class="token punctuation">.</span><span class="token constant">BLOG_LIST</span><span class="token punctuation">,</span> blogList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Entity-数据实体"><a href="#Entity-数据实体" class="headerlink" title="Entity 数据实体"></a>Entity 数据实体</h3><p><a href="../mogu_blog_v2/mogu_commons/src/main/java/com/moxi/mogublog/commons/entity/Blog.java">Blog类</a></p><p>继承自<a href="../mogu_blog_v2/mogu_base/src/main/java/com/moxi/mougblog/base/entity/SuperEntity.java">SuperEntity</a></p><p>对应数据库表<code>t_blog</code>，数据库脚本<a href="../mogu_blog_v2/doc/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC/mogu_blog.sql">mogu_blog.sql</a> line 94 - 471，下面只有表定义部分</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;*Table structure for table &#96;t_blog&#96; *&#x2F;DROP TABLE IF EXISTS &#96;t_blog&#96;;CREATE TABLE &#96;t_blog&#96;(    &#96;uid&#96;            varchar(32)         NOT NULL COMMENT &#39;唯一uid&#39;,    &#96;title&#96;          varchar(200)                 DEFAULT NULL COMMENT &#39;博客标题&#39;,    &#96;summary&#96;        varchar(200)                 DEFAULT NULL COMMENT &#39;博客简介&#39;,    &#96;content&#96;        longtext COMMENT &#39;博客内容&#39;,    &#96;tag_uid&#96;        varchar(255)                 DEFAULT NULL COMMENT &#39;标签uid&#39;,    &#96;click_count&#96;    int(11)                      DEFAULT &#39;0&#39; COMMENT &#39;博客点击数&#39;,    &#96;collect_count&#96;  int(11)                      DEFAULT &#39;0&#39; COMMENT &#39;博客收藏数&#39;,    &#96;file_uid&#96;       varchar(255)                 DEFAULT NULL COMMENT &#39;标题图片uid&#39;,    &#96;status&#96;         tinyint(1) unsigned NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;状态&#39;,    &#96;create_time&#96;    timestamp           NOT NULL DEFAULT &#39;0000-00-00 00:00:00&#39; COMMENT &#39;创建时间&#39;,    &#96;update_time&#96;    timestamp           NOT NULL DEFAULT &#39;0000-00-00 00:00:00&#39; COMMENT &#39;更新时间&#39;,    &#96;admin_uid&#96;      varchar(32)                  DEFAULT NULL COMMENT &#39;管理员uid&#39;,    &#96;is_original&#96;    varchar(1)                   DEFAULT &#39;1&#39; COMMENT &#39;是否原创（0:不是 1：是）&#39;,    &#96;author&#96;         varchar(255)                 DEFAULT NULL COMMENT &#39;作者&#39;,    &#96;articles_part&#96;  varchar(255)                 DEFAULT NULL COMMENT &#39;文章出处&#39;,    &#96;blog_sort_uid&#96;  varchar(32)                  DEFAULT NULL COMMENT &#39;博客分类UID&#39;,    &#96;level&#96;          tinyint(1)                   DEFAULT &#39;0&#39; COMMENT &#39;推荐等级(0:正常)&#39;,    &#96;is_publish&#96;     varchar(1)                   DEFAULT &#39;1&#39; COMMENT &#39;是否发布：0：否，1：是&#39;,    &#96;sort&#96;           int(11)             NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;排序字段&#39;,    &#96;open_comment&#96;   tinyint(1)          NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;是否开启评论(0:否 1:是)&#39;,    &#96;type&#96;           tinyint(1)          NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;类型【0 博客， 1：推广】&#39;,    &#96;outside_link&#96;   varchar(1024)                DEFAULT NULL COMMENT &#39;外链【如果是推广，那么将跳转到外链】&#39;,    &#96;oid&#96;            int(11)             NOT NULL AUTO_INCREMENT COMMENT &#39;唯一oid&#39;,    &#96;user_uid&#96;       varchar(32)                  DEFAULT NULL COMMENT &#39;投稿用户UID&#39;,    &#96;article_source&#96; tinyint(1)          NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;文章来源【0 后台添加，1 用户投稿】&#39;,    PRIMARY KEY (&#96;uid&#96;, &#96;oid&#96;),    KEY &#96;oid&#96; (&#96;oid&#96;)) ENGINE &#x3D; InnoDB  AUTO_INCREMENT &#x3D; 59  DEFAULT CHARSET &#x3D; utf8 COMMENT &#x3D;&#39;博客表&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存在的疑问"><a href="#存在的疑问" class="headerlink" title="存在的疑问"></a>存在的疑问</h2><ol><li>抽出的代码如搜索结果的显示部分，人工阅读可以知道点击不同位置时触发的action应该作为模板的空，而显示更多对应的action应该作为搜索显示的一部分</li><li>代码好像越往后拓展雪球滚得越大，按照个人理解，<code>$&#123;base_url&#125;/#/list</code>页面承担了所有查找功能而不仅仅只有关键字搜索功能，这导致事件处理部分判断条件繁多，调用API数量也很多，是否背离了简单的搜索这个功能需求</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;搜索框与搜索结果的代码模板：以蘑菇博客为例&quot;&gt;&lt;a href=&quot;#搜索框与搜索结果的代码模板：以蘑菇博客为例&quot; class=&quot;headerlink&quot; title=&quot;搜索框与搜索结果的代码模板：以蘑菇博客为例&quot;&gt;&lt;/a&gt;搜索框与搜索结果的代码模板：以蘑菇博客为例&lt;/</summary>
      
    
    
    
    <category term="打黑工" scheme="http://lixutian.github.io/blog/categories/%E6%89%93%E9%BB%91%E5%B7%A5/"/>
    
    
    <category term="Mogu Blog" scheme="http://lixutian.github.io/blog/tags/Mogu-Blog/"/>
    
  </entry>
  
  <entry>
    <title>开源组件库调研</title>
    <link href="http://lixutian.github.io/blog/2024/10/19/kai-yuan-zu-jian-ku-diao-yan/"/>
    <id>http://lixutian.github.io/blog/2024/10/19/kai-yuan-zu-jian-ku-diao-yan/</id>
    <published>2024-10-18T16:00:00.000Z</published>
    <updated>2024-11-30T19:09:01.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="能从开源组件库获取到的信息"><a href="#能从开源组件库获取到的信息" class="headerlink" title="能从开源组件库获取到的信息"></a>能从开源组件库获取到的信息</h1><h2 id="分别能获取到的个性信息"><a href="#分别能获取到的个性信息" class="headerlink" title="分别能获取到的个性信息"></a>分别能获取到的个性信息</h2><h3 id="1-太极开源-https-gitee-com-opentj-jui"><a href="#1-太极开源-https-gitee-com-opentj-jui" class="headerlink" title="1. 太极开源 https://gitee.com/opentj/jui"></a>1. 太极开源 <a href="https://gitee.com/opentj/jui">https://gitee.com/opentj/jui</a></h3><ul><li><p>源代码【Gitee】</p></li><li><p>开发文档较少</p><blockquote><p>我根据README文档安装部署了太极开源的项目，查阅了storybook文档，发现仅有关于Button、Header、Page的少量文档</p></blockquote><ul><li>组件可视化展示</li><li>组件调用代码</li><li>属性介绍</li></ul></li><li><p>使用TailWind CSS和svelte<br><img src="/blog/2024/10/19/kai-yuan-zu-jian-ku-diao-yan/image-1.png" alt="image-1"></p><p><img src="/blog/2024/10/19/kai-yuan-zu-jian-ku-diao-yan/image.png" alt="image"></p></li></ul><h3 id="2-TailWind-UI-https-tailwindui-com-ref-top"><a href="#2-TailWind-UI-https-tailwindui-com-ref-top" class="headerlink" title="2. TailWind UI https://tailwindui.com/?ref=top"></a>2. TailWind UI <a href="https://tailwindui.com/?ref=top">https://tailwindui.com/?ref=top</a></h3><ul><li>Components 组件<ul><li>组件可视化展示</li><li>组件调用代码 HTML、React、Vue 【部分需付费】</li><li>官网无超链接，但从Google中搜索到tailwindcss开源仓库【GitHub】</li></ul></li><li>Templates 模板<ul><li>可视化展示</li><li>【付费使用】</li></ul></li><li>UI Kit<ul><li>预览 组件可视化展示</li><li>【付费使用】</li></ul></li><li>Docs 文档<ul><li>上手指南</li><li>未找到API使用文档</li></ul></li></ul><h3 id="3-Microsoft-Fluent-UI-https-developer-microsoft-com-en-us-fluentui"><a href="#3-Microsoft-Fluent-UI-https-developer-microsoft-com-en-us-fluentui" class="headerlink" title="3. Microsoft Fluent UI  https://developer.microsoft.com/en-us/fluentui#/"></a>3. Microsoft Fluent UI  <a href="https://developer.microsoft.com/en-us/fluentui#/">https://developer.microsoft.com/en-us/fluentui#/</a></h3><ul><li>Get Started<ul><li>快速上手指南</li><li>源代码仓库【GitHub】</li></ul></li><li>Styles<ul><li>设计理念</li><li>配色方案</li><li>素材</li></ul></li><li>Controls 组件介绍<ul><li>组件可视化展示</li><li>组件调用代码【各种框架和环境】</li><li>Implement<ul><li>接口说明</li><li>继承信息</li></ul></li></ul></li><li>Resources<ul><li>开发平台</li><li>文档</li><li>字体</li></ul></li><li>DashBoard<ul><li>跳转到Microsoft365去了</li></ul></li></ul><h3 id="4-字节-Arco-Design-https-arco-design"><a href="#4-字节-Arco-Design-https-arco-design" class="headerlink" title="4. 字节 Arco Design https://arco.design/"></a>4. 字节 Arco Design <a href="https://arco.design/">https://arco.design/</a></h3><ul><li>开发指南<ul><li>快速上手指南</li></ul></li><li>设计指南<ul><li>一些界面设计的参考指南文档</li></ul></li><li>组件<ul><li>组件可视化展示</li><li>组件源代码【GitHub】</li><li>组件调用代码 React、Vue</li><li>API文档<ul><li>参数名</li><li>描述</li><li>类型</li><li>默认值</li><li>版本</li></ul></li></ul></li><li>组件用法<ul><li>组件介绍</li><li>使用建议<ul><li>一些界面设计的参考指南文档</li></ul></li></ul></li><li>风格配置平台<ul><li>主题和配色方案说明文档</li></ul></li><li>最佳实践<ul><li>项目demo的框架结构说明</li></ul></li><li>物料平台<ul><li>历史版本</li></ul></li></ul><h3 id="5-饿了么-Element-https-element-eleme-cn-zh-CN"><a href="#5-饿了么-Element-https-element-eleme-cn-zh-CN" class="headerlink" title="5. 饿了么 Element https://element.eleme.cn/#/zh-CN"></a>5. 饿了么 Element <a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></h3><ul><li>指南<ul><li>设计原则</li></ul></li><li>组件<ul><li>更新日志</li><li>开发指南</li><li>组件<ul><li>组件可视化展示</li><li>组件源代码【GitHub】</li><li>组件调用代码 Vue 但是有其他框架的版本仓库</li><li>属性说明</li></ul></li></ul></li><li>主题<ul><li>配色方案<ul><li>官方</li><li>自定义</li></ul></li></ul></li><li>资源</li></ul><h3 id="6-蚂蚁-Ant-Design-https-ant-design-antgroup-com-components-overview-cn"><a href="#6-蚂蚁-Ant-Design-https-ant-design-antgroup-com-components-overview-cn" class="headerlink" title="6. 蚂蚁 Ant Design https://ant-design.antgroup.com/components/overview-cn/"></a>6. 蚂蚁 Ant Design <a href="https://ant-design.antgroup.com/components/overview-cn/">https://ant-design.antgroup.com/components/overview-cn/</a></h3><ul><li>设计 介绍和高层设计架构<ul><li>全局样式：色彩、布局、字体、图表等设计素材</li><li>设计理念</li><li>设计模式</li></ul></li><li>研发 框架上手指南<ul><li>简介</li><li>更新日志</li><li>上手指南</li></ul></li><li>组件 <strong>开源组件</strong><ul><li>组件可视化展示</li><li>组件源代码【GitHub】</li><li>组件调用代码 React</li><li>API文档</li><li>FAQ</li></ul></li><li>博客 一些技术文档<ul><li>特性</li><li>疑难杂症</li></ul></li><li>资源 开发资源</li></ul><h2 id="整体能获取到的共性信息"><a href="#整体能获取到的共性信息" class="headerlink" title="整体能获取到的共性信息"></a>整体能获取到的共性信息</h2><blockquote><p>太极和TailWind能获取到的信息偏少，暂不考虑</p></blockquote><ul><li>整体介绍<ul><li>项目简介</li><li>设计理念和价值观<ul><li>配色方案</li><li>字体</li><li>图标素材等</li></ul></li><li>界面UI设计原则</li><li>更新日志</li></ul></li><li>源代码仓库<ul><li>一般都是一整个项目仓库</li><li>几乎没有将每个组件对应的源代码标识链接出来</li></ul></li><li>上手指南 Get Started<ul><li>安装步骤</li><li>使用方法</li></ul></li><li>组件文档<ul><li>组件可视化展示<ul><li>静态图片</li><li>动态网页效果</li></ul></li><li>组件调用代码<ul><li>一般和上面的组件可视化展示对应</li><li>相当于API使用示例</li></ul></li><li>更详细的API介绍<ul><li>属性的名称、描述、数据类型、取值含义</li></ul></li></ul></li><li>其他资源<ul><li>博客</li><li>开发工具包</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;能从开源组件库获取到的信息&quot;&gt;&lt;a href=&quot;#能从开源组件库获取到的信息&quot; class=&quot;headerlink&quot; title=&quot;能从开源组件库获取到的信息&quot;&gt;&lt;/a&gt;能从开源组件库获取到的信息&lt;/h1&gt;&lt;h2 id=&quot;分别能获取到的个性信息&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="打黑工" scheme="http://lixutian.github.io/blog/categories/%E6%89%93%E9%BB%91%E5%B7%A5/"/>
    
    
    <category term="前端" scheme="http://lixutian.github.io/blog/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="组件库" scheme="http://lixutian.github.io/blog/tags/%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    
  </entry>
  
</feed>
